{
  "version": 3,
  "sources": ["../../@stdlib/ndarray-base-sub2ind/lib/main.js", "../../@stdlib/ndarray-base-sub2ind/lib/index.js", "../../@stdlib/ndarray-sub2ind/lib/defaults.json", "../../@stdlib/ndarray-sub2ind/lib/validate.js", "../../@stdlib/ndarray-sub2ind/lib/main.js", "../../@stdlib/ndarray-sub2ind/lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Converts subscripts to a linear index.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a subscript exceeds array dimensions.\n*     -   **normalize**: normalize negative subscripts and throw an error when a subscript exceeds array dimensions.\n*     -   **wrap**: wrap around subscripts exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.\n*\n* -   When provided fewer modes than dimensions, the function recycles modes using modulo arithmetic.\n*\n* -   When provided a stride array containing negative strides, if an `offset` is greater than `0`, the function treats subscripts as mapping to a linear index in an underlying data buffer for the array, thus returning a linear index from the perspective of that buffer. If an `offset` is equal to `0`, the function treats subscripts as mapping to a linear index in an array view, thus returning a linear index from the perspective of that view.\n*\n*     ```text\n*     Dims: 2x2\n*     Buffer: [ 1, 2, 3, 4 ]\n*\n*     View = [ a00, a01,\n*              a10, a11 ]\n*\n*     Strides: 2,1\n*     Offset: 0\n*\n*     View = [ 1, 2,\n*              3, 4 ]\n*\n*     Strides: 2,-1\n*     Offset: 1\n*\n*     View = [ 2, 1,\n*              4, 3 ]\n*\n*     Strides: -2,1\n*     Offset: 2\n*\n*     View = [ 3, 4,\n*              1, 2 ]\n*\n*     Strides: -2,-1\n*     Offset: 3\n*\n*     View = [ 4, 3,\n*              2, 1 ]\n*     ```\n*\n*     ```javascript\n*     var shape = [ 2, 2 ];\n*     var strides = [ -2, 1 ];\n*     var offset = 2;\n*     var mode = [ 'throw' ];\n*\n*     // From the perspective of a view...\n*     var idx = sub2ind( shape, strides, 0, 0, 0, mode );\n*     // returns 0\n*\n*     idx = sub2ind( shape, strides, 0, 0, 1, mode );\n*     // returns 1\n*\n*     idx = sub2ind( shape, strides, 0, 1, 0, mode );\n*     // returns 2\n*\n*     idx = sub2ind( shape, strides, 0, 1, 1, mode );\n*     // returns 3\n*\n*     // From the perspective of an underlying buffer...\n*     idx = sub2ind( shape, strides, offset, 0, 0, mode );\n*     // returns 2\n*\n*     idx = sub2ind( shape, strides, offset, 0, 1, mode );\n*     // returns 3\n*\n*     idx = sub2ind( shape, strides, offset, 1, 0, mode );\n*     // returns 0\n*\n*     idx = sub2ind( shape, strides, offset, 1, 1, mode );\n*     // returns 1\n*     ```\n*\n*     In short, from the perspective of a view, view data is always ordered.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - stride array\n* @param {NonNegativeInteger} offset - location of the first indexed value **based** on the stride array\n* @param {...integer} i - subscripts\n* @param {StringArray} mode - specifies how to handle subscripts which exceed array dimensions\n* @throws {RangeError} must provide subscripts which do not exceed array dimensions\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 3, 1 ];\n* var offset = 0;\n* var mode = [ 'throw' ]\n*\n* var idx = sub2ind( shape, strides, offset, 1, 2, 2, mode );\n* // returns [ 'throw' ]\n*/\nfunction sub2ind() {\n\tvar strides;\n\tvar offset;\n\tvar nmodes;\n\tvar shape;\n\tvar ndims;\n\tvar modes;\n\tvar mode;\n\tvar idx;\n\tvar m;\n\tvar s;\n\tvar j;\n\tvar i;\n\n\tshape = arguments[ 0 ];\n\tstrides = arguments[ 1 ];\n\toffset = arguments[ 2 ];\n\tndims = shape.length;\n\tmodes = arguments[ 3+ndims ]; // last argument\n\tnmodes = modes.length;\n\tidx = offset;\n\tfor ( i = 0; i < ndims; i++ ) {\n\t\tm = shape[ i ];\n\t\tj = arguments[ i+3 ];\n\t\tmode = modes[ i%nmodes ];\n\t\tif ( mode === 'clamp' ) {\n\t\t\tif ( j < 0 ) {\n\t\t\t\tj = 0;\n\t\t\t} else if ( j >= m ) {\n\t\t\t\tj = m - 1;\n\t\t\t}\n\t\t} else if ( mode === 'wrap' ) {\n\t\t\tif ( j < 0 ) {\n\t\t\t\tj += m; // slight optimization to avoid modulo arithmetic when |j| <= m\n\t\t\t\tif ( j < 0 ) {\n\t\t\t\t\tj %= m;\n\t\t\t\t\tif ( j !== 0 ) {\n\t\t\t\t\t\tj += m;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ( j >= m ) {\n\t\t\t\tj -= m; // slight optimization to avoid modulo arithmetic when m < j <= 2m\n\t\t\t\tif ( j >= m ) {\n\t\t\t\t\tj %= m;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( mode === 'normalize' && j < 0 ) {\n\t\t\t\tj += m;\n\t\t\t}\n\t\t\tif ( j < 0 || j >= m ) {\n\t\t\t\tthrow new RangeError( format( 'invalid argument. Subscripts must not exceed array dimensions. Subscript: `%u`. Value: `%d`.', i, j ) );\n\t\t\t}\n\t\t}\n\t\ts = strides[ i ];\n\n\t\t// Check if array view...\n\t\tif ( s < 0 && offset === 0 ) {\n\t\t\tidx -= j * s; // increments idx\n\t\t} else {\n\t\t\tidx += j * s; // may increment or decrement idx\n\t\t}\n\t}\n\treturn idx;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert subscripts to a linear index.\n*\n* @module @stdlib/ndarray-base-sub2ind\n*\n* @example\n* var sub2ind = require( '@stdlib/ndarray-base-sub2ind' );\n*\n* var shape = [ 3, 3, 3 ];\n* var strides = [ 9, 3, 1 ];\n* var offset = 0;\n* var mode = [ 'throw' ];\n*\n* var idx = sub2ind( shape, strides, offset, 1, 2, 2, mode );\n* // returns 17\n*/\n\n// MODULES //\n\nvar sub2ind = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n", "{\n\t\"mode\": [ \"throw\" ],\n\t\"order\": \"row-major\"\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar isIndexMode = require( '@stdlib/ndarray-base-assert-is-index-mode' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {(StringArray|string)} [options.mode] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'throw',\n*     'order': 'column-major'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isArray( opts.mode ) ) {\n\t\t\topts.mode = [ opts.mode ];\n\t\t} else if ( opts.mode.length === 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option cannot be an empty array.', 'mode' ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.mode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.mode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.', 'mode', opts.mode[ i ] ) );\n\t\t\t}\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'order' ) ) {\n\t\topts.order = options.order;\n\t\tif ( !isOrder( opts.order ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a supported/recognized order. Option: `%s`.', 'order', opts.order ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeIntegerArray = require( '@stdlib/assert-is-nonnegative-integer-array' ).primitives;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar shape2strides = require( '@stdlib/ndarray-base-shape2strides' );\nvar getIndex = require( '@stdlib/ndarray-base-sub2ind' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Converts subscripts to a linear index.\n*\n* ## Notes\n*\n* -   The function accepts the following \"modes\":\n*\n*     -   **throw**: throw an error when a subscript exceeds array dimensions.\n*     -   **normalize**: normalize negative subscripts and throw an error when a subscript exceeds array dimensions.\n*     -   **wrap**: wrap around subscripts exceeding array dimensions using modulo arithmetic.\n*     -   **clamp**: set subscripts exceeding array dimensions to either `0` (minimum index) or the maximum index along a particular dimension.\n*\n* -   If provided fewer modes than dimensions, the function recycles modes using modulo arithmetic.\n*\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {...integer} i - subscripts\n* @param {Options} [options] - function options\n* @param {(StringArray|string)} [options.mode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions\n* @param {string} [options.order=\"row-major\"] - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @throws {TypeError} first argument must be an array-like object containing nonnegative integers\n* @throws {TypeError} subscripts must be integer valued\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide subscripts which do not exceed array dimensions\n* @throws {RangeError} number of subscripts much match the number of dimensions\n* @returns {NonNegativeInteger} linear index\n*\n* @example\n* var i = sub2ind( [ 3, 3, 3 ], 1, 2, 2 );\n* // returns 17\n*/\nfunction sub2ind() {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar len;\n\tvar i;\n\tvar j;\n\n\tshape = arguments[ 0 ];\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.', shape ) );\n\t}\n\tlen = arguments.length;\n\tndims = shape.length;\n\n\topts = {};\n\topts.mode = defaults.mode.slice();\n\topts.order = defaults.order;\n\n\tif ( len > ndims+1 ) {\n\t\tj = len - 1;\n\t\toptions = arguments[ j ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tj = len;\n\t}\n\ti = 1;\n\tif ( j-i !== ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of provided subscripts must match the number of dimensions. ndims: `%u`. Number of subscripts: `%u`.', ndims, j-i ) );\n\t}\n\targs = new Array( ndims+4 );\n\targs[ 0 ] = shape;\n\targs[ 1 ] = shape2strides( shape, opts.order );\n\targs[ 2 ] = 0; // strides are positive, so offset is always zero\n\tfor ( ; i < j; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Subscripts must be integer valued. Argument: `%u`. Value: `%s`.', i, arguments[ i ] ) );\n\t\t}\n\t\targs[ i+2 ] = arguments[ i ];\n\t}\n\targs[ i+2 ] = opts.mode; // i+2 == args.length-1\n\treturn getIndex.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert subscripts to a linear index.\n*\n* @module @stdlib/ndarray-sub2ind\n*\n* @example\n* var sub2ind = require( '@stdlib/ndarray-sub2ind' );\n*\n* var i = sub2ind( [ 3, 3, 3 ], 1, 2, 2 );\n* // returns 17\n*/\n\n// MODULES //\n\nvar sub2ind = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = sub2ind;\n"],
  "mappings": "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",
  "names": ["require_lib", "require_main", "require_lib"]
}
