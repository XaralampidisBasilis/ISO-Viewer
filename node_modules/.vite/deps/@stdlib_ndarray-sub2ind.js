import {
  require_lib,
  require_lib10 as require_lib8,
  require_lib11 as require_lib9,
  require_lib3 as require_lib2,
  require_lib5 as require_lib3,
  require_lib6 as require_lib4,
  require_lib7 as require_lib5,
  require_lib8 as require_lib6,
  require_lib9 as require_lib7
} from "./chunk-ITPF5RFW.js";
import {
  __commonJS
} from "./chunk-XNHBATJA.js";

// node_modules/@stdlib/ndarray-base-sub2ind/lib/main.js
var require_main = __commonJS({
  "node_modules/@stdlib/ndarray-base-sub2ind/lib/main.js"(exports, module) {
    "use strict";
    var format = require_lib();
    function sub2ind() {
      var strides;
      var offset;
      var nmodes;
      var shape;
      var ndims;
      var modes;
      var mode;
      var idx;
      var m;
      var s;
      var j;
      var i;
      shape = arguments[0];
      strides = arguments[1];
      offset = arguments[2];
      ndims = shape.length;
      modes = arguments[3 + ndims];
      nmodes = modes.length;
      idx = offset;
      for (i = 0; i < ndims; i++) {
        m = shape[i];
        j = arguments[i + 3];
        mode = modes[i % nmodes];
        if (mode === "clamp") {
          if (j < 0) {
            j = 0;
          } else if (j >= m) {
            j = m - 1;
          }
        } else if (mode === "wrap") {
          if (j < 0) {
            j += m;
            if (j < 0) {
              j %= m;
              if (j !== 0) {
                j += m;
              }
            }
          } else if (j >= m) {
            j -= m;
            if (j >= m) {
              j %= m;
            }
          }
        } else {
          if (mode === "normalize" && j < 0) {
            j += m;
          }
          if (j < 0 || j >= m) {
            throw new RangeError(format("invalid argument. Subscripts must not exceed array dimensions. Subscript: `%u`. Value: `%d`.", i, j));
          }
        }
        s = strides[i];
        if (s < 0 && offset === 0) {
          idx -= j * s;
        } else {
          idx += j * s;
        }
      }
      return idx;
    }
    module.exports = sub2ind;
  }
});

// node_modules/@stdlib/ndarray-base-sub2ind/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@stdlib/ndarray-base-sub2ind/lib/index.js"(exports, module) {
    "use strict";
    var sub2ind = require_main();
    module.exports = sub2ind;
  }
});

// node_modules/@stdlib/ndarray-sub2ind/lib/defaults.json
var require_defaults = __commonJS({
  "node_modules/@stdlib/ndarray-sub2ind/lib/defaults.json"(exports, module) {
    module.exports = {
      mode: ["throw"],
      order: "row-major"
    };
  }
});

// node_modules/@stdlib/ndarray-sub2ind/lib/validate.js
var require_validate = __commonJS({
  "node_modules/@stdlib/ndarray-sub2ind/lib/validate.js"(exports, module) {
    "use strict";
    var isObject = require_lib7();
    var hasOwnProp = require_lib2();
    var isArray = require_lib6();
    var isOrder = require_lib8();
    var isIndexMode = require_lib9();
    var format = require_lib();
    function validate(opts, options) {
      var i;
      if (!isObject(options)) {
        return new TypeError(format("invalid argument. Options argument must be an object. Value: `%s`.", options));
      }
      if (hasOwnProp(options, "mode")) {
        opts.mode = options.mode;
        if (!isArray(opts.mode)) {
          opts.mode = [opts.mode];
        } else if (opts.mode.length === 0) {
          return new TypeError(format("invalid option. `%s` option cannot be an empty array.", "mode"));
        }
        for (i = 0; i < opts.mode.length; i++) {
          if (!isIndexMode(opts.mode[i])) {
            return new TypeError(format("invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.", "mode", opts.mode[i]));
          }
        }
      }
      if (hasOwnProp(options, "order")) {
        opts.order = options.order;
        if (!isOrder(opts.order)) {
          return new TypeError(format("invalid option. `%s` option must be a supported/recognized order. Option: `%s`.", "order", opts.order));
        }
      }
      return null;
    }
    module.exports = validate;
  }
});

// node_modules/@stdlib/ndarray-sub2ind/lib/main.js
var require_main2 = __commonJS({
  "node_modules/@stdlib/ndarray-sub2ind/lib/main.js"(exports, module) {
    "use strict";
    var isNonNegativeIntegerArray = require_lib4().primitives;
    var isInteger = require_lib3().isPrimitive;
    var shape2strides = require_lib5();
    var getIndex = require_lib10();
    var format = require_lib();
    var defaults = require_defaults();
    var validate = require_validate();
    function sub2ind() {
      var options;
      var shape;
      var ndims;
      var args;
      var opts;
      var err;
      var len;
      var i;
      var j;
      shape = arguments[0];
      if (!isNonNegativeIntegerArray(shape)) {
        throw new TypeError(format("invalid argument. First argument must be an array-like object containing nonnegative integers. Value: `%s`.", shape));
      }
      len = arguments.length;
      ndims = shape.length;
      opts = {};
      opts.mode = defaults.mode.slice();
      opts.order = defaults.order;
      if (len > ndims + 1) {
        j = len - 1;
        options = arguments[j];
        err = validate(opts, options);
        if (err) {
          throw err;
        }
      } else {
        j = len;
      }
      i = 1;
      if (j - i !== ndims) {
        throw new RangeError(format("invalid argument. Number of provided subscripts must match the number of dimensions. ndims: `%u`. Number of subscripts: `%u`.", ndims, j - i));
      }
      args = new Array(ndims + 4);
      args[0] = shape;
      args[1] = shape2strides(shape, opts.order);
      args[2] = 0;
      for (; i < j; i++) {
        if (!isInteger(arguments[i])) {
          throw new TypeError(format("invalid argument. Subscripts must be integer valued. Argument: `%u`. Value: `%s`.", i, arguments[i]));
        }
        args[i + 2] = arguments[i];
      }
      args[i + 2] = opts.mode;
      return getIndex.apply(null, args);
    }
    module.exports = sub2ind;
  }
});

// node_modules/@stdlib/ndarray-sub2ind/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@stdlib/ndarray-sub2ind/lib/index.js"(exports, module) {
    var sub2ind = require_main2();
    module.exports = sub2ind;
  }
});
export default require_lib11();
/*! Bundled license information:

@stdlib/ndarray-base-sub2ind/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-sub2ind/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-sub2ind/lib/validate.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-sub2ind/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-sub2ind/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
*/
//# sourceMappingURL=@stdlib_ndarray-sub2ind.js.map
