import {
  __commonJS
} from "./chunk-XNHBATJA.js";

// node_modules/@stdlib/utils-define-property/lib/define_property.js
var require_define_property = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/define_property.js"(exports, module) {
    "use strict";
    var main = typeof Object.defineProperty === "function" ? Object.defineProperty : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js
var require_has_define_property_support = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js"(exports, module) {
    "use strict";
    var defineProperty = require_define_property();
    function hasDefinePropertySupport() {
      try {
        defineProperty({}, "x", {});
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = hasDefinePropertySupport;
  }
});

// node_modules/@stdlib/utils-define-property/lib/builtin.js
var require_builtin = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/builtin.js"(exports, module) {
    "use strict";
    var defineProperty = Object.defineProperty;
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js
var require_is_number = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/is_number.js"(exports, module) {
    "use strict";
    function isNumber(value) {
      return typeof value === "number";
    }
    module.exports = isNumber;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js
var require_zero_pad = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/zero_pad.js"(exports, module) {
    "use strict";
    function startsWithMinus(str) {
      return str[0] === "-";
    }
    function zeros(n) {
      var out = "";
      var i;
      for (i = 0; i < n; i++) {
        out += "0";
      }
      return out;
    }
    function zeroPad(str, width, right) {
      var negative = false;
      var pad = width - str.length;
      if (pad < 0) {
        return str;
      }
      if (startsWithMinus(str)) {
        negative = true;
        str = str.substr(1);
      }
      str = right ? str + zeros(pad) : zeros(pad) + str;
      if (negative) {
        str = "-" + str;
      }
      return str;
    }
    module.exports = zeroPad;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js
var require_format_integer = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/format_integer.js"(exports, module) {
    "use strict";
    var isNumber = require_is_number();
    var zeroPad = require_zero_pad();
    var lowercase = String.prototype.toLowerCase;
    var uppercase = String.prototype.toUpperCase;
    function formatInteger(token) {
      var base;
      var out;
      var i;
      switch (token.specifier) {
        case "b":
          base = 2;
          break;
        case "o":
          base = 8;
          break;
        case "x":
        case "X":
          base = 16;
          break;
        case "d":
        case "i":
        case "u":
        default:
          base = 10;
          break;
      }
      out = token.arg;
      i = parseInt(out, 10);
      if (!isFinite(i)) {
        if (!isNumber(out)) {
          throw new Error("invalid integer. Value: " + out);
        }
        i = 0;
      }
      if (i < 0 && (token.specifier === "u" || base !== 10)) {
        i = 4294967295 + i + 1;
      }
      if (i < 0) {
        out = (-i).toString(base);
        if (token.precision) {
          out = zeroPad(out, token.precision, token.padRight);
        }
        out = "-" + out;
      } else {
        out = i.toString(base);
        if (!i && !token.precision) {
          out = "";
        } else if (token.precision) {
          out = zeroPad(out, token.precision, token.padRight);
        }
        if (token.sign) {
          out = token.sign + out;
        }
      }
      if (base === 16) {
        if (token.alternate) {
          out = "0x" + out;
        }
        out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);
      }
      if (base === 8) {
        if (token.alternate && out.charAt(0) !== "0") {
          out = "0" + out;
        }
      }
      return out;
    }
    module.exports = formatInteger;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js
var require_is_string = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/is_string.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js
var require_format_double = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/format_double.js"(exports, module) {
    "use strict";
    var isNumber = require_is_number();
    var abs = Math.abs;
    var lowercase = String.prototype.toLowerCase;
    var uppercase = String.prototype.toUpperCase;
    var replace = String.prototype.replace;
    var RE_EXP_POS_DIGITS = /e\+(\d)$/;
    var RE_EXP_NEG_DIGITS = /e-(\d)$/;
    var RE_ONLY_DIGITS = /^(\d+)$/;
    var RE_DIGITS_BEFORE_EXP = /^(\d+)e/;
    var RE_TRAILING_PERIOD_ZERO = /\.0$/;
    var RE_PERIOD_ZERO_EXP = /\.0*e/;
    var RE_ZERO_BEFORE_EXP = /(\..*[^0])0*e/;
    function formatDouble(token) {
      var digits;
      var out;
      var f = parseFloat(token.arg);
      if (!isFinite(f)) {
        if (!isNumber(token.arg)) {
          throw new Error("invalid floating-point number. Value: " + out);
        }
        f = token.arg;
      }
      switch (token.specifier) {
        case "e":
        case "E":
          out = f.toExponential(token.precision);
          break;
        case "f":
        case "F":
          out = f.toFixed(token.precision);
          break;
        case "g":
        case "G":
          if (abs(f) < 1e-4) {
            digits = token.precision;
            if (digits > 0) {
              digits -= 1;
            }
            out = f.toExponential(digits);
          } else {
            out = f.toPrecision(token.precision);
          }
          if (!token.alternate) {
            out = replace.call(out, RE_ZERO_BEFORE_EXP, "$1e");
            out = replace.call(out, RE_PERIOD_ZERO_EXP, "e");
            out = replace.call(out, RE_TRAILING_PERIOD_ZERO, "");
          }
          break;
        default:
          throw new Error("invalid double notation. Value: " + token.specifier);
      }
      out = replace.call(out, RE_EXP_POS_DIGITS, "e+0$1");
      out = replace.call(out, RE_EXP_NEG_DIGITS, "e-0$1");
      if (token.alternate) {
        out = replace.call(out, RE_ONLY_DIGITS, "$1.");
        out = replace.call(out, RE_DIGITS_BEFORE_EXP, "$1.e");
      }
      if (f >= 0 && token.sign) {
        out = token.sign + out;
      }
      out = token.specifier === uppercase.call(token.specifier) ? uppercase.call(out) : lowercase.call(out);
      return out;
    }
    module.exports = formatDouble;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js
var require_space_pad = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/space_pad.js"(exports, module) {
    "use strict";
    function spaces(n) {
      var out = "";
      var i;
      for (i = 0; i < n; i++) {
        out += " ";
      }
      return out;
    }
    function spacePad(str, width, right) {
      var pad = width - str.length;
      if (pad < 0) {
        return str;
      }
      str = right ? str + spaces(pad) : spaces(pad) + str;
      return str;
    }
    module.exports = spacePad;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/main.js
var require_main = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/main.js"(exports, module) {
    "use strict";
    var formatInteger = require_format_integer();
    var isString = require_is_string();
    var formatDouble = require_format_double();
    var spacePad = require_space_pad();
    var zeroPad = require_zero_pad();
    var fromCharCode = String.fromCharCode;
    var isnan = isNaN;
    var isArray = Array.isArray;
    function initialize(token) {
      var out = {};
      out.specifier = token.specifier;
      out.precision = token.precision === void 0 ? 1 : token.precision;
      out.width = token.width;
      out.flags = token.flags || "";
      out.mapping = token.mapping;
      return out;
    }
    function formatInterpolate(tokens) {
      var hasPeriod;
      var flags;
      var token;
      var flag;
      var num;
      var out;
      var pos;
      var i;
      var j;
      if (!isArray(tokens)) {
        throw new TypeError("invalid argument. First argument must be an array. Value: `" + tokens + "`.");
      }
      out = "";
      pos = 1;
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        if (isString(token)) {
          out += token;
        } else {
          hasPeriod = token.precision !== void 0;
          token = initialize(token);
          if (!token.specifier) {
            throw new TypeError("invalid argument. Token is missing `specifier` property. Index: `" + i + "`. Value: `" + token + "`.");
          }
          if (token.mapping) {
            pos = token.mapping;
          }
          flags = token.flags;
          for (j = 0; j < flags.length; j++) {
            flag = flags.charAt(j);
            switch (flag) {
              case " ":
                token.sign = " ";
                break;
              case "+":
                token.sign = "+";
                break;
              case "-":
                token.padRight = true;
                token.padZeros = false;
                break;
              case "0":
                token.padZeros = flags.indexOf("-") < 0;
                break;
              case "#":
                token.alternate = true;
                break;
              default:
                throw new Error("invalid flag: " + flag);
            }
          }
          if (token.width === "*") {
            token.width = parseInt(arguments[pos], 10);
            pos += 1;
            if (isnan(token.width)) {
              throw new TypeError("the argument for * width at position " + pos + " is not a number. Value: `" + token.width + "`.");
            }
            if (token.width < 0) {
              token.padRight = true;
              token.width = -token.width;
            }
          }
          if (hasPeriod) {
            if (token.precision === "*") {
              token.precision = parseInt(arguments[pos], 10);
              pos += 1;
              if (isnan(token.precision)) {
                throw new TypeError("the argument for * precision at position " + pos + " is not a number. Value: `" + token.precision + "`.");
              }
              if (token.precision < 0) {
                token.precision = 1;
                hasPeriod = false;
              }
            }
          }
          token.arg = arguments[pos];
          switch (token.specifier) {
            case "b":
            case "o":
            case "x":
            case "X":
            case "d":
            case "i":
            case "u":
              if (hasPeriod) {
                token.padZeros = false;
              }
              token.arg = formatInteger(token);
              break;
            case "s":
              token.maxWidth = hasPeriod ? token.precision : -1;
              break;
            case "c":
              if (!isnan(token.arg)) {
                num = parseInt(token.arg, 10);
                if (num < 0 || num > 127) {
                  throw new Error("invalid character code. Value: " + token.arg);
                }
                token.arg = isnan(num) ? String(token.arg) : fromCharCode(num);
              }
              break;
            case "e":
            case "E":
            case "f":
            case "F":
            case "g":
            case "G":
              if (!hasPeriod) {
                token.precision = 6;
              }
              token.arg = formatDouble(token);
              break;
            default:
              throw new Error("invalid specifier: " + token.specifier);
          }
          if (token.maxWidth >= 0 && token.arg.length > token.maxWidth) {
            token.arg = token.arg.substring(0, token.maxWidth);
          }
          if (token.padZeros) {
            token.arg = zeroPad(token.arg, token.width || token.precision, token.padRight);
          } else if (token.width) {
            token.arg = spacePad(token.arg, token.width, token.padRight);
          }
          out += token.arg || "";
          pos += 1;
        }
      }
      return out;
    }
    module.exports = formatInterpolate;
  }
});

// node_modules/@stdlib/string-base-format-interpolate/lib/index.js
var require_lib = __commonJS({
  "node_modules/@stdlib/string-base-format-interpolate/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main();
    module.exports = main;
  }
});

// node_modules/@stdlib/string-base-format-tokenize/lib/main.js
var require_main2 = __commonJS({
  "node_modules/@stdlib/string-base-format-tokenize/lib/main.js"(exports, module) {
    "use strict";
    var RE = /%(?:([1-9]\d*)\$)?([0 +\-#]*)(\*|\d+)?(?:(\.)(\*|\d+)?)?[hlL]?([%A-Za-z])/g;
    function parse(match) {
      var token = {
        "mapping": match[1] ? parseInt(match[1], 10) : void 0,
        "flags": match[2],
        "width": match[3],
        "precision": match[5],
        "specifier": match[6]
      };
      if (match[4] === "." && match[5] === void 0) {
        token.precision = "1";
      }
      return token;
    }
    function formatTokenize(str) {
      var content;
      var tokens;
      var match;
      var prev;
      tokens = [];
      prev = 0;
      match = RE.exec(str);
      while (match) {
        content = str.slice(prev, RE.lastIndex - match[0].length);
        if (content.length) {
          tokens.push(content);
        }
        tokens.push(parse(match));
        prev = RE.lastIndex;
        match = RE.exec(str);
      }
      content = str.slice(prev);
      if (content.length) {
        tokens.push(content);
      }
      return tokens;
    }
    module.exports = formatTokenize;
  }
});

// node_modules/@stdlib/string-base-format-tokenize/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@stdlib/string-base-format-tokenize/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main2();
    module.exports = main;
  }
});

// node_modules/@stdlib/string-format/lib/is_string.js
var require_is_string2 = __commonJS({
  "node_modules/@stdlib/string-format/lib/is_string.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/string-format/lib/main.js
var require_main3 = __commonJS({
  "node_modules/@stdlib/string-format/lib/main.js"(exports, module) {
    "use strict";
    var interpolate = require_lib();
    var tokenize = require_lib2();
    var isString = require_is_string2();
    function format(str) {
      var args;
      var i;
      if (!isString(str)) {
        throw new TypeError(format("invalid argument. First argument must be a string. Value: `%s`.", str));
      }
      args = [tokenize(str)];
      for (i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      return interpolate.apply(null, args);
    }
    module.exports = format;
  }
});

// node_modules/@stdlib/string-format/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@stdlib/string-format/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main3();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-define-property/lib/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/polyfill.js"(exports, module) {
    "use strict";
    var format = require_lib3();
    var objectProtoype = Object.prototype;
    var toStr = objectProtoype.toString;
    var defineGetter = objectProtoype.__defineGetter__;
    var defineSetter = objectProtoype.__defineSetter__;
    var lookupGetter = objectProtoype.__lookupGetter__;
    var lookupSetter = objectProtoype.__lookupSetter__;
    function defineProperty(obj, prop, descriptor) {
      var prototype;
      var hasValue;
      var hasGet;
      var hasSet;
      if (typeof obj !== "object" || obj === null || toStr.call(obj) === "[object Array]") {
        throw new TypeError(format("invalid argument. First argument must be an object. Value: `%s`.", obj));
      }
      if (typeof descriptor !== "object" || descriptor === null || toStr.call(descriptor) === "[object Array]") {
        throw new TypeError(format("invalid argument. Property descriptor must be an object. Value: `%s`.", descriptor));
      }
      hasValue = "value" in descriptor;
      if (hasValue) {
        if (lookupGetter.call(obj, prop) || lookupSetter.call(obj, prop)) {
          prototype = obj.__proto__;
          obj.__proto__ = objectProtoype;
          delete obj[prop];
          obj[prop] = descriptor.value;
          obj.__proto__ = prototype;
        } else {
          obj[prop] = descriptor.value;
        }
      }
      hasGet = "get" in descriptor;
      hasSet = "set" in descriptor;
      if (hasValue && (hasGet || hasSet)) {
        throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");
      }
      if (hasGet && defineGetter) {
        defineGetter.call(obj, prop, descriptor.get);
      }
      if (hasSet && defineSetter) {
        defineSetter.call(obj, prop, descriptor.set);
      }
      return obj;
    }
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils-define-property/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/index.js"(exports, module) {
    "use strict";
    var hasDefinePropertySupport = require_has_define_property_support();
    var builtin = require_builtin();
    var polyfill = require_polyfill();
    var defineProperty;
    if (hasDefinePropertySupport()) {
      defineProperty = builtin;
    } else {
      defineProperty = polyfill;
    }
    module.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js
var require_main4 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js"(exports, module) {
    "use strict";
    var defineProperty = require_lib4();
    function setNonEnumerableReadOnly(obj, prop, value) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "writable": false,
        "value": value
      });
    }
    module.exports = setNonEnumerableReadOnly;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main4();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-number/lib/primitive.js
var require_primitive = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/primitive.js"(exports, module) {
    "use strict";
    function isNumber(value) {
      return typeof value === "number";
    }
    module.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-has-symbol-support/lib/main.js
var require_main5 = __commonJS({
  "node_modules/@stdlib/assert-has-symbol-support/lib/main.js"(exports, module) {
    "use strict";
    function hasSymbolSupport() {
      return typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    }
    module.exports = hasSymbolSupport;
  }
});

// node_modules/@stdlib/assert-has-symbol-support/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@stdlib/assert-has-symbol-support/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main5();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js
var require_main6 = __commonJS({
  "node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js"(exports, module) {
    "use strict";
    var hasSymbols = require_lib6();
    var FLG = hasSymbols();
    function hasToStringTagSupport() {
      return FLG && typeof Symbol.toStringTag === "symbol";
    }
    module.exports = hasToStringTagSupport;
  }
});

// node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main6();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-native-class/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/tostring.js"(exports, module) {
    "use strict";
    var toStr = Object.prototype.toString;
    module.exports = toStr;
  }
});

// node_modules/@stdlib/utils-native-class/lib/main.js
var require_main7 = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/main.js"(exports, module) {
    "use strict";
    var toStr = require_tostring();
    function nativeClass(v) {
      return toStr.call(v);
    }
    module.exports = nativeClass;
  }
});

// node_modules/@stdlib/assert-has-own-property/lib/main.js
var require_main8 = __commonJS({
  "node_modules/@stdlib/assert-has-own-property/lib/main.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    function hasOwnProp(value, property) {
      if (value === void 0 || value === null) {
        return false;
      }
      return has.call(value, property);
    }
    module.exports = hasOwnProp;
  }
});

// node_modules/@stdlib/assert-has-own-property/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/@stdlib/assert-has-own-property/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main8();
    module.exports = main;
  }
});

// node_modules/@stdlib/symbol-ctor/lib/main.js
var require_main9 = __commonJS({
  "node_modules/@stdlib/symbol-ctor/lib/main.js"(exports, module) {
    "use strict";
    var Sym = typeof Symbol === "function" ? Symbol : void 0;
    module.exports = Sym;
  }
});

// node_modules/@stdlib/symbol-ctor/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/@stdlib/symbol-ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main9();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-native-class/lib/tostringtag.js
var require_tostringtag = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/tostringtag.js"(exports, module) {
    "use strict";
    var Symbol2 = require_lib9();
    var toStrTag = typeof Symbol2 === "function" ? Symbol2.toStringTag : "";
    module.exports = toStrTag;
  }
});

// node_modules/@stdlib/utils-native-class/lib/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/polyfill.js"(exports, module) {
    "use strict";
    var hasOwnProp = require_lib8();
    var toStringTag = require_tostringtag();
    var toStr = require_tostring();
    function nativeClass(v) {
      var isOwn;
      var tag;
      var out;
      if (v === null || v === void 0) {
        return toStr.call(v);
      }
      tag = v[toStringTag];
      isOwn = hasOwnProp(v, toStringTag);
      try {
        v[toStringTag] = void 0;
      } catch (err) {
        return toStr.call(v);
      }
      out = toStr.call(v);
      if (isOwn) {
        v[toStringTag] = tag;
      } else {
        delete v[toStringTag];
      }
      return out;
    }
    module.exports = nativeClass;
  }
});

// node_modules/@stdlib/utils-native-class/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/index.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var builtin = require_main7();
    var polyfill = require_polyfill2();
    var main;
    if (hasToStringTag()) {
      main = polyfill;
    } else {
      main = builtin;
    }
    module.exports = main;
  }
});

// node_modules/@stdlib/number-ctor/lib/main.js
var require_main10 = __commonJS({
  "node_modules/@stdlib/number-ctor/lib/main.js"(exports, module) {
    "use strict";
    module.exports = Number;
  }
});

// node_modules/@stdlib/number-ctor/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@stdlib/number-ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main10();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-number/lib/tostring.js
var require_tostring2 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/tostring.js"(exports, module) {
    "use strict";
    var Number2 = require_lib11();
    var toString = Number2.prototype.toString;
    module.exports = toString;
  }
});

// node_modules/@stdlib/assert-is-number/lib/try2serialize.js
var require_try2serialize = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/try2serialize.js"(exports, module) {
    "use strict";
    var toString = require_tostring2();
    function test(value) {
      try {
        toString.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/assert-is-number/lib/object.js
var require_object = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/object.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var nativeClass = require_lib10();
    var Number2 = require_lib11();
    var test = require_try2serialize();
    var FLG = hasToStringTag();
    function isNumber(value) {
      if (typeof value === "object") {
        if (value instanceof Number2) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object Number]";
      }
      return false;
    }
    module.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-number/lib/main.js
var require_main11 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive();
    var isObject = require_object();
    function isNumber(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-number/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main11();
    var isPrimitive = require_primitive();
    var isObject = require_object();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/constants-float64-pinf/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@stdlib/constants-float64-pinf/lib/index.js"(exports, module) {
    "use strict";
    var FLOAT64_PINF = Number.POSITIVE_INFINITY;
    module.exports = FLOAT64_PINF;
  }
});

// node_modules/@stdlib/constants-float64-ninf/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@stdlib/constants-float64-ninf/lib/index.js"(exports, module) {
    "use strict";
    var Number2 = require_lib11();
    var FLOAT64_NINF = Number2.NEGATIVE_INFINITY;
    module.exports = FLOAT64_NINF;
  }
});

// node_modules/@stdlib/math-base-special-floor/lib/main.js
var require_main12 = __commonJS({
  "node_modules/@stdlib/math-base-special-floor/lib/main.js"(exports, module) {
    "use strict";
    var floor = Math.floor;
    module.exports = floor;
  }
});

// node_modules/@stdlib/math-base-special-floor/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@stdlib/math-base-special-floor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main12();
    module.exports = main;
  }
});

// node_modules/@stdlib/math-base-assert-is-integer/lib/main.js
var require_main13 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-integer/lib/main.js"(exports, module) {
    "use strict";
    var floor = require_lib15();
    function isInteger(x) {
      return floor(x) === x;
    }
    module.exports = isInteger;
  }
});

// node_modules/@stdlib/math-base-assert-is-integer/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-integer/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main13();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/integer.js
var require_integer = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/integer.js"(exports, module) {
    "use strict";
    var PINF = require_lib13();
    var NINF = require_lib14();
    var isInt = require_lib16();
    function isInteger(value) {
      return value < PINF && value > NINF && isInt(value);
    }
    module.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/primitive.js
var require_primitive2 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/primitive.js"(exports, module) {
    "use strict";
    var isNumber = require_lib12().isPrimitive;
    var isInt = require_integer();
    function isInteger(value) {
      return isNumber(value) && isInt(value);
    }
    module.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/object.js
var require_object2 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/object.js"(exports, module) {
    "use strict";
    var isNumber = require_lib12().isObject;
    var isInt = require_integer();
    function isInteger(value) {
      return isNumber(value) && isInt(value.valueOf());
    }
    module.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/main.js
var require_main14 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    function isInteger(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main14();
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js
var require_primitive3 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js"(exports, module) {
    "use strict";
    var isInteger = require_lib17().isPrimitive;
    function isNonNegativeInteger(value) {
      return isInteger(value) && value >= 0;
    }
    module.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js
var require_object3 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js"(exports, module) {
    "use strict";
    var isInteger = require_lib17().isObject;
    function isNonNegativeInteger(value) {
      return isInteger(value) && value.valueOf() >= 0;
    }
    module.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js
var require_main15 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive3();
    var isObject = require_object3();
    function isNonNegativeInteger(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js
var require_lib18 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main15();
    var isPrimitive = require_primitive3();
    var isObject = require_object3();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/constants-array-max-array-length/lib/index.js
var require_lib19 = __commonJS({
  "node_modules/@stdlib/constants-array-max-array-length/lib/index.js"(exports, module) {
    "use strict";
    var MAX_ARRAY_LENGTH = 4294967295 >>> 0;
    module.exports = MAX_ARRAY_LENGTH;
  }
});

// node_modules/@stdlib/assert-is-array-like/lib/main.js
var require_main16 = __commonJS({
  "node_modules/@stdlib/assert-is-array-like/lib/main.js"(exports, module) {
    "use strict";
    var isInteger = require_lib16();
    var MAX_LENGTH = require_lib19();
    function isArrayLike(value) {
      return value !== void 0 && value !== null && typeof value !== "function" && typeof value.length === "number" && isInteger(value.length) && value.length >= 0 && value.length <= MAX_LENGTH;
    }
    module.exports = isArrayLike;
  }
});

// node_modules/@stdlib/assert-is-array-like/lib/index.js
var require_lib20 = __commonJS({
  "node_modules/@stdlib/assert-is-array-like/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main16();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-tools-array-like-function/lib/main.js
var require_main17 = __commonJS({
  "node_modules/@stdlib/assert-tools-array-like-function/lib/main.js"(exports, module) {
    "use strict";
    var isArrayLike = require_lib20();
    var format = require_lib3();
    function arraylikefcn(predicate) {
      if (typeof predicate !== "function") {
        throw new TypeError(format("invalid argument. Must provide a function. Value: `%s`.", predicate));
      }
      return every;
      function every(value) {
        var len;
        var i;
        if (!isArrayLike(value)) {
          return false;
        }
        len = value.length;
        if (len === 0) {
          return false;
        }
        for (i = 0; i < len; i++) {
          if (predicate(value[i]) === false) {
            return false;
          }
        }
        return true;
      }
    }
    module.exports = arraylikefcn;
  }
});

// node_modules/@stdlib/assert-tools-array-like-function/lib/index.js
var require_lib21 = __commonJS({
  "node_modules/@stdlib/assert-tools-array-like-function/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main17();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer-array/lib/index.js
var require_lib22 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer-array/lib/index.js"(exports, module) {
    "use strict";
    var isNonNegativeInteger = require_lib18();
    var setReadOnly = require_lib5();
    var arrayfun = require_lib21();
    var isPrimitiveArray = arrayfun(isNonNegativeInteger.isPrimitive);
    var isObjectArray = arrayfun(isNonNegativeInteger.isObject);
    var isNonNegativeIntegerArray = arrayfun(isNonNegativeInteger);
    setReadOnly(isNonNegativeIntegerArray, "primitives", isPrimitiveArray);
    setReadOnly(isNonNegativeIntegerArray, "objects", isObjectArray);
    module.exports = isNonNegativeIntegerArray;
  }
});

// node_modules/@stdlib/ndarray-base-shape2strides/lib/main.js
var require_main18 = __commonJS({
  "node_modules/@stdlib/ndarray-base-shape2strides/lib/main.js"(exports, module) {
    "use strict";
    function rowmajor(shape) {
      var ndims;
      var out;
      var s;
      var i;
      ndims = shape.length;
      out = [];
      for (i = 0; i < ndims; i++) {
        out.push(0);
      }
      s = 1;
      for (i = ndims - 1; i >= 0; i--) {
        out[i] = s;
        s *= shape[i];
      }
      return out;
    }
    function columnmajor(shape) {
      var out;
      var s;
      var i;
      out = [];
      s = 1;
      for (i = 0; i < shape.length; i++) {
        out.push(s);
        s *= shape[i];
      }
      return out;
    }
    function shape2strides(shape, order) {
      if (order === "column-major") {
        return columnmajor(shape);
      }
      return rowmajor(shape);
    }
    module.exports = shape2strides;
  }
});

// node_modules/@stdlib/ndarray-base-shape2strides/lib/assign.js
var require_assign = __commonJS({
  "node_modules/@stdlib/ndarray-base-shape2strides/lib/assign.js"(exports, module) {
    "use strict";
    function rowmajor(shape, out) {
      var ndims;
      var s;
      var i;
      ndims = shape.length;
      s = 1;
      for (i = ndims - 1; i >= 0; i--) {
        out[i] = s;
        s *= shape[i];
      }
      return out;
    }
    function columnmajor(shape, out) {
      var s;
      var i;
      s = 1;
      for (i = 0; i < shape.length; i++) {
        out[i] = s;
        s *= shape[i];
      }
      return out;
    }
    function shape2strides(shape, order, out) {
      if (order === "column-major") {
        return columnmajor(shape, out);
      }
      return rowmajor(shape, out);
    }
    module.exports = shape2strides;
  }
});

// node_modules/@stdlib/ndarray-base-shape2strides/lib/index.js
var require_lib23 = __commonJS({
  "node_modules/@stdlib/ndarray-base-shape2strides/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main18();
    var assign = require_assign();
    setReadOnly(main, "assign", assign);
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-array/lib/main.js
var require_main19 = __commonJS({
  "node_modules/@stdlib/assert-is-array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var f;
    function isArray(value) {
      return nativeClass(value) === "[object Array]";
    }
    if (Array.isArray) {
      f = Array.isArray;
    } else {
      f = isArray;
    }
    module.exports = f;
  }
});

// node_modules/@stdlib/assert-is-array/lib/index.js
var require_lib24 = __commonJS({
  "node_modules/@stdlib/assert-is-array/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main19();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-object/lib/main.js
var require_main20 = __commonJS({
  "node_modules/@stdlib/assert-is-object/lib/main.js"(exports, module) {
    "use strict";
    var isArray = require_lib24();
    function isObject(value) {
      return typeof value === "object" && value !== null && !isArray(value);
    }
    module.exports = isObject;
  }
});

// node_modules/@stdlib/assert-is-object/lib/index.js
var require_lib25 = __commonJS({
  "node_modules/@stdlib/assert-is-object/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main20();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/re.js
var require_re = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/re.js"(exports, module) {
    "use strict";
    var RE = /./;
    module.exports = RE;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/primitive.js
var require_primitive4 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/primitive.js"(exports, module) {
    "use strict";
    function isBoolean(value) {
      return typeof value === "boolean";
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/boolean-ctor/lib/main.js
var require_main21 = __commonJS({
  "node_modules/@stdlib/boolean-ctor/lib/main.js"(exports, module) {
    "use strict";
    var Bool = Boolean;
    module.exports = Bool;
  }
});

// node_modules/@stdlib/boolean-ctor/lib/index.js
var require_lib26 = __commonJS({
  "node_modules/@stdlib/boolean-ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main21();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/tostring.js
var require_tostring3 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/tostring.js"(exports, module) {
    "use strict";
    var toString = Boolean.prototype.toString;
    module.exports = toString;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js
var require_try2serialize2 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js"(exports, module) {
    "use strict";
    var toString = require_tostring3();
    function test(value) {
      try {
        toString.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/object.js
var require_object4 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/object.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var nativeClass = require_lib10();
    var Boolean2 = require_lib26();
    var test = require_try2serialize2();
    var FLG = hasToStringTag();
    function isBoolean(value) {
      if (typeof value === "object") {
        if (value instanceof Boolean2) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object Boolean]";
      }
      return false;
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/main.js
var require_main22 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive4();
    var isObject = require_object4();
    function isBoolean(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/index.js
var require_lib27 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main22();
    var isPrimitive = require_primitive4();
    var isObject = require_object4();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-global/lib/codegen.js
var require_codegen = __commonJS({
  "node_modules/@stdlib/utils-global/lib/codegen.js"(exports, module) {
    "use strict";
    function getGlobal() {
      return new Function("return this;")();
    }
    module.exports = getGlobal;
  }
});

// node_modules/@stdlib/utils-global/lib/self.js
var require_self = __commonJS({
  "node_modules/@stdlib/utils-global/lib/self.js"(exports, module) {
    "use strict";
    var obj = typeof self === "object" ? self : null;
    module.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/window.js
var require_window = __commonJS({
  "node_modules/@stdlib/utils-global/lib/window.js"(exports, module) {
    "use strict";
    var obj = typeof window === "object" ? window : null;
    module.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/global_this.js
var require_global_this = __commonJS({
  "node_modules/@stdlib/utils-global/lib/global_this.js"(exports, module) {
    "use strict";
    var obj = typeof globalThis === "object" ? globalThis : null;
    module.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/browser.js
var require_browser = __commonJS({
  "node_modules/@stdlib/utils-global/lib/browser.js"(exports, module) {
    "use strict";
    var isBoolean = require_lib27().isPrimitive;
    var format = require_lib3();
    var getThis = require_codegen();
    var Self = require_self();
    var Win = require_window();
    var GlobalThis = require_global_this();
    function getGlobal(codegen) {
      if (arguments.length) {
        if (!isBoolean(codegen)) {
          throw new TypeError(format("invalid argument. Must provide a boolean. Value: `%s`.", codegen));
        }
        if (codegen) {
          return getThis();
        }
      }
      if (GlobalThis) {
        return GlobalThis;
      }
      if (Self) {
        return Self;
      }
      if (Win) {
        return Win;
      }
      throw new Error("unexpected error. Unable to resolve global object.");
    }
    module.exports = getGlobal;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js
var require_nodelist = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js"(exports, module) {
    "use strict";
    var getGlobal = require_browser();
    var root = getGlobal();
    var nodeList = root.document && root.document.childNodes;
    module.exports = nodeList;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js
var require_typedarray = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js"(exports, module) {
    "use strict";
    var typedarray = Int8Array;
    module.exports = typedarray;
  }
});

// node_modules/@stdlib/utils-type-of/lib/check.js
var require_check = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/check.js"(exports, module) {
    "use strict";
    var RE = require_re();
    var nodeList = require_nodelist();
    var typedarray = require_typedarray();
    function check() {
      if (
        // Chrome 1-12 returns 'function' for regular expression instances (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof):
        typeof RE === "function" || // Safari 8 returns 'object' for typed array and weak map constructors (underscore #1929):
        typeof typedarray === "object" || // PhantomJS 1.9 returns 'function' for `NodeList` instances (underscore #2236):
        typeof nodeList === "function"
      ) {
        return true;
      }
      return false;
    }
    module.exports = check;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/main.js
var require_main23 = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/main.js"(exports, module) {
    "use strict";
    function reFunctionName() {
      return /^\s*function\s*([^(]*)/i;
    }
    module.exports = reFunctionName;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/regexp.js
var require_regexp = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/regexp.js"(exports, module) {
    "use strict";
    var reFunctionName = require_main23();
    var RE_FUNCTION_NAME = reFunctionName();
    module.exports = RE_FUNCTION_NAME;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/index.js
var require_lib28 = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main23();
    var REGEXP = require_regexp();
    setReadOnly(main, "REGEXP", REGEXP);
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-tools-array-function/lib/main.js
var require_main24 = __commonJS({
  "node_modules/@stdlib/assert-tools-array-function/lib/main.js"(exports, module) {
    "use strict";
    var isArray = require_lib24();
    var format = require_lib3();
    function arrayfcn(predicate) {
      if (typeof predicate !== "function") {
        throw new TypeError(format("invalid argument. Must provide a function. Value: `%s`.", predicate));
      }
      return every;
      function every(value) {
        var len;
        var i;
        if (!isArray(value)) {
          return false;
        }
        len = value.length;
        if (len === 0) {
          return false;
        }
        for (i = 0; i < len; i++) {
          if (predicate(value[i]) === false) {
            return false;
          }
        }
        return true;
      }
    }
    module.exports = arrayfcn;
  }
});

// node_modules/@stdlib/assert-tools-array-function/lib/index.js
var require_lib29 = __commonJS({
  "node_modules/@stdlib/assert-tools-array-function/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main24();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-object-like/lib/main.js
var require_main25 = __commonJS({
  "node_modules/@stdlib/assert-is-object-like/lib/main.js"(exports, module) {
    "use strict";
    function isObjectLike(value) {
      return value !== null && typeof value === "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/@stdlib/assert-is-object-like/lib/index.js
var require_lib30 = __commonJS({
  "node_modules/@stdlib/assert-is-object-like/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var arrayfun = require_lib29();
    var main = require_main25();
    var isObjectLikeArray = arrayfun(main);
    setReadOnly(main, "isObjectLikeArray", isObjectLikeArray);
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-buffer/lib/main.js
var require_main26 = __commonJS({
  "node_modules/@stdlib/assert-is-buffer/lib/main.js"(exports, module) {
    "use strict";
    var isObjectLike = require_lib30();
    function isBuffer(value) {
      return isObjectLike(value) && // eslint-disable-next-line no-underscore-dangle
      (value._isBuffer || // for envs missing Object.prototype.constructor (e.g., Safari 5-7)
      value.constructor && // WARNING: `typeof` is not a foolproof check, as certain envs consider RegExp and NodeList instances to be functions
      typeof value.constructor.isBuffer === "function" && value.constructor.isBuffer(value));
    }
    module.exports = isBuffer;
  }
});

// node_modules/@stdlib/assert-is-buffer/lib/index.js
var require_lib31 = __commonJS({
  "node_modules/@stdlib/assert-is-buffer/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main26();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-constructor-name/lib/main.js
var require_main27 = __commonJS({
  "node_modules/@stdlib/utils-constructor-name/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var RE = require_lib28().REGEXP;
    var isBuffer = require_lib31();
    function constructorName(v) {
      var match;
      var name;
      var ctor;
      name = nativeClass(v).slice(8, -1);
      if ((name === "Object" || name === "Error") && v.constructor) {
        ctor = v.constructor;
        if (typeof ctor.name === "string") {
          return ctor.name;
        }
        match = RE.exec(ctor.toString());
        if (match) {
          return match[1];
        }
      }
      if (isBuffer(v)) {
        return "Buffer";
      }
      return name;
    }
    module.exports = constructorName;
  }
});

// node_modules/@stdlib/utils-constructor-name/lib/index.js
var require_lib32 = __commonJS({
  "node_modules/@stdlib/utils-constructor-name/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main27();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-type-of/lib/main.js
var require_main28 = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/main.js"(exports, module) {
    "use strict";
    var ctorName = require_lib32();
    function typeOf(v) {
      var type;
      if (v === null) {
        return "null";
      }
      type = typeof v;
      if (type === "object") {
        return ctorName(v).toLowerCase();
      }
      return type;
    }
    module.exports = typeOf;
  }
});

// node_modules/@stdlib/utils-type-of/lib/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/polyfill.js"(exports, module) {
    "use strict";
    var ctorName = require_lib32();
    function typeOf(v) {
      return ctorName(v).toLowerCase();
    }
    module.exports = typeOf;
  }
});

// node_modules/@stdlib/utils-type-of/lib/index.js
var require_lib33 = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/index.js"(exports, module) {
    "use strict";
    var usePolyfill = require_check();
    var builtin = require_main28();
    var polyfill = require_polyfill3();
    var main = usePolyfill() ? polyfill : builtin;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-function/lib/main.js
var require_main29 = __commonJS({
  "node_modules/@stdlib/assert-is-function/lib/main.js"(exports, module) {
    "use strict";
    var typeOf = require_lib33();
    function isFunction(value) {
      return typeOf(value) === "function";
    }
    module.exports = isFunction;
  }
});

// node_modules/@stdlib/assert-is-function/lib/index.js
var require_lib34 = __commonJS({
  "node_modules/@stdlib/assert-is-function/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main29();
    module.exports = main;
  }
});

// node_modules/@stdlib/object-ctor/lib/main.js
var require_main30 = __commonJS({
  "node_modules/@stdlib/object-ctor/lib/main.js"(exports, module) {
    "use strict";
    var Obj = Object;
    module.exports = Obj;
  }
});

// node_modules/@stdlib/object-ctor/lib/index.js
var require_lib35 = __commonJS({
  "node_modules/@stdlib/object-ctor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main30();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/native.js
var require_native = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/native.js"(exports, module) {
    "use strict";
    var getProto = Object.getPrototypeOf;
    module.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/proto.js
var require_proto = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/proto.js"(exports, module) {
    "use strict";
    function getProto(obj) {
      return obj.__proto__;
    }
    module.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js
var require_polyfill4 = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var getProto = require_proto();
    function getPrototypeOf(obj) {
      var proto = getProto(obj);
      if (proto || proto === null) {
        return proto;
      }
      if (nativeClass(obj.constructor) === "[object Function]") {
        return obj.constructor.prototype;
      }
      if (obj instanceof Object) {
        return Object.prototype;
      }
      return null;
    }
    module.exports = getPrototypeOf;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/detect.js
var require_detect = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/detect.js"(exports, module) {
    "use strict";
    var isFunction = require_lib34();
    var builtin = require_native();
    var polyfill = require_polyfill4();
    var getProto;
    if (isFunction(Object.getPrototypeOf)) {
      getProto = builtin;
    } else {
      getProto = polyfill;
    }
    module.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/main.js
var require_main31 = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/main.js"(exports, module) {
    "use strict";
    var Object2 = require_lib35();
    var getProto = require_detect();
    function getPrototypeOf(value) {
      if (value === null || value === void 0) {
        return null;
      }
      value = Object2(value);
      return getProto(value);
    }
    module.exports = getPrototypeOf;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/index.js
var require_lib36 = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main31();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-plain-object/lib/main.js
var require_main32 = __commonJS({
  "node_modules/@stdlib/assert-is-plain-object/lib/main.js"(exports, module) {
    "use strict";
    var isObject = require_lib25();
    var isFunction = require_lib34();
    var getPrototypeOf = require_lib36();
    var hasOwnProp = require_lib8();
    var nativeClass = require_lib10();
    var objectPrototype = Object.prototype;
    function ownProps(obj) {
      var key;
      for (key in obj) {
        if (!hasOwnProp(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function isPlainObject(value) {
      var proto;
      if (!isObject(value)) {
        return false;
      }
      proto = getPrototypeOf(value);
      if (!proto) {
        return true;
      }
      return (
        // Cannot have own `constructor` property:
        !hasOwnProp(value, "constructor") && // Prototype `constructor` property must be a function (see also https://bugs.jquery.com/ticket/9897 and http://stackoverflow.com/questions/18531624/isplainobject-thing):
        hasOwnProp(proto, "constructor") && isFunction(proto.constructor) && nativeClass(proto.constructor) === "[object Function]" && // Test for object-specific method:
        hasOwnProp(proto, "isPrototypeOf") && isFunction(proto.isPrototypeOf) && // Test if the prototype matches the global `Object` prototype (same realm):
        (proto === objectPrototype || // Test that all properties are own properties (cross-realm; *most* likely a plain object):
        ownProps(value))
      );
    }
    module.exports = isPlainObject;
  }
});

// node_modules/@stdlib/assert-is-plain-object/lib/index.js
var require_lib37 = __commonJS({
  "node_modules/@stdlib/assert-is-plain-object/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main32();
    module.exports = main;
  }
});

// node_modules/@stdlib/ndarray-orders/lib/orders.json
var require_orders = __commonJS({
  "node_modules/@stdlib/ndarray-orders/lib/orders.json"(exports, module) {
    module.exports = [
      "row-major",
      "column-major"
    ];
  }
});

// node_modules/@stdlib/ndarray-orders/lib/main.js
var require_main33 = __commonJS({
  "node_modules/@stdlib/ndarray-orders/lib/main.js"(exports, module) {
    "use strict";
    var ORDERS = require_orders();
    function orders() {
      return ORDERS.slice();
    }
    module.exports = orders;
  }
});

// node_modules/@stdlib/ndarray-orders/lib/enum.js
var require_enum = __commonJS({
  "node_modules/@stdlib/ndarray-orders/lib/enum.js"(exports, module) {
    "use strict";
    function enumerated() {
      return {
        // Row-major (C-style):
        "row-major": 1,
        // Column-major (Fortran-style):
        "column-major": 2
      };
    }
    module.exports = enumerated;
  }
});

// node_modules/@stdlib/ndarray-orders/lib/index.js
var require_lib38 = __commonJS({
  "node_modules/@stdlib/ndarray-orders/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main33();
    var enumeration = require_enum();
    setReadOnly(main, "enum", enumeration);
    module.exports = main;
  }
});

// node_modules/@stdlib/ndarray-base-assert-is-order/lib/main.js
var require_main34 = __commonJS({
  "node_modules/@stdlib/ndarray-base-assert-is-order/lib/main.js"(exports, module) {
    "use strict";
    var orders = require_lib38();
    var ORDERS = orders();
    var len = ORDERS.length;
    function isOrder(v) {
      var i;
      for (i = 0; i < len; i++) {
        if (v === ORDERS[i]) {
          return true;
        }
      }
      return false;
    }
    module.exports = isOrder;
  }
});

// node_modules/@stdlib/ndarray-base-assert-is-order/lib/index.js
var require_lib39 = __commonJS({
  "node_modules/@stdlib/ndarray-base-assert-is-order/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main34();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-assert-is-accessor-array/lib/main.js
var require_main35 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-accessor-array/lib/main.js"(exports, module) {
    "use strict";
    var TYPE = "function";
    function isAccessorArray(value) {
      return typeof value.get === TYPE && typeof value.set === TYPE;
    }
    module.exports = isAccessorArray;
  }
});

// node_modules/@stdlib/array-base-assert-is-accessor-array/lib/index.js
var require_lib40 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-accessor-array/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main35();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-accessor-getter/lib/main.js
var require_main36 = __commonJS({
  "node_modules/@stdlib/array-base-accessor-getter/lib/main.js"(exports, module) {
    "use strict";
    var GETTERS = {
      "complex128": getComplex128,
      "complex64": getComplex64,
      "default": getArrayLike
    };
    function getComplex128(arr, idx) {
      return arr.get(idx);
    }
    function getComplex64(arr, idx) {
      return arr.get(idx);
    }
    function getArrayLike(arr, idx) {
      return arr.get(idx);
    }
    function getter(dtype) {
      var f = GETTERS[dtype];
      if (typeof f === "function") {
        return f;
      }
      return GETTERS.default;
    }
    module.exports = getter;
  }
});

// node_modules/@stdlib/array-base-accessor-getter/lib/index.js
var require_lib41 = __commonJS({
  "node_modules/@stdlib/array-base-accessor-getter/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main36();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-getter/lib/main.js
var require_main37 = __commonJS({
  "node_modules/@stdlib/array-base-getter/lib/main.js"(exports, module) {
    "use strict";
    var GETTERS = {
      "float64": getFloat64,
      "float32": getFloat32,
      "int32": getInt32,
      "int16": getInt16,
      "int8": getInt8,
      "uint32": getUint32,
      "uint16": getUint16,
      "uint8": getUint8,
      "uint8c": getUint8c,
      "generic": getGeneric,
      "default": getArrayLike
    };
    function getFloat64(arr, idx) {
      return arr[idx];
    }
    function getFloat32(arr, idx) {
      return arr[idx];
    }
    function getInt32(arr, idx) {
      return arr[idx];
    }
    function getInt16(arr, idx) {
      return arr[idx];
    }
    function getInt8(arr, idx) {
      return arr[idx];
    }
    function getUint32(arr, idx) {
      return arr[idx];
    }
    function getUint16(arr, idx) {
      return arr[idx];
    }
    function getUint8(arr, idx) {
      return arr[idx];
    }
    function getUint8c(arr, idx) {
      return arr[idx];
    }
    function getGeneric(arr, idx) {
      return arr[idx];
    }
    function getArrayLike(arr, idx) {
      return arr[idx];
    }
    function getter(dtype) {
      var f = GETTERS[dtype];
      if (typeof f === "function") {
        return f;
      }
      return GETTERS.default;
    }
    module.exports = getter;
  }
});

// node_modules/@stdlib/array-base-getter/lib/index.js
var require_lib42 = __commonJS({
  "node_modules/@stdlib/array-base-getter/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main37();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-dtype/lib/ctor2dtype.js
var require_ctor2dtype = __commonJS({
  "node_modules/@stdlib/array-dtype/lib/ctor2dtype.js"(exports, module) {
    "use strict";
    var ctor2dtypes = {
      "Float32Array": "float32",
      "Float64Array": "float64",
      "Array": "generic",
      "Int16Array": "int16",
      "Int32Array": "int32",
      "Int8Array": "int8",
      "Uint16Array": "uint16",
      "Uint32Array": "uint32",
      "Uint8Array": "uint8",
      "Uint8ClampedArray": "uint8c",
      "Complex64Array": "complex64",
      "Complex128Array": "complex128"
    };
    module.exports = ctor2dtypes;
  }
});

// node_modules/@stdlib/assert-is-float64array/lib/main.js
var require_main38 = __commonJS({
  "node_modules/@stdlib/assert-is-float64array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasFloat64Array = typeof Float64Array === "function";
    function isFloat64Array(value) {
      return hasFloat64Array && value instanceof Float64Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Float64Array]";
    }
    module.exports = isFloat64Array;
  }
});

// node_modules/@stdlib/assert-is-float64array/lib/index.js
var require_lib43 = __commonJS({
  "node_modules/@stdlib/assert-is-float64array/lib/index.js"(exports, module) {
    "use strict";
    var isFloat64Array = require_main38();
    module.exports = isFloat64Array;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js
var require_float64array = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js"(exports, module) {
    "use strict";
    var main = typeof Float64Array === "function" ? Float64Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/main.js
var require_main39 = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/main.js"(exports, module) {
    "use strict";
    var isFloat64Array = require_lib43();
    var GlobalFloat64Array = require_float64array();
    function hasFloat64ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalFloat64Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalFloat64Array([1, 3.14, -3.14, NaN]);
        bool = isFloat64Array(arr) && arr[0] === 1 && arr[1] === 3.14 && arr[2] === -3.14 && arr[3] !== arr[3];
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasFloat64ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/index.js
var require_lib44 = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasFloat64ArraySupport = require_main39();
    module.exports = hasFloat64ArraySupport;
  }
});

// node_modules/@stdlib/array-float64/lib/main.js
var require_main40 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Float64Array === "function" ? Float64Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-float64/lib/polyfill.js
var require_polyfill5 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-float64/lib/index.js
var require_lib45 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/index.js"(exports, module) {
    "use strict";
    var hasFloat64ArraySupport = require_lib44();
    var builtin = require_main40();
    var polyfill = require_polyfill5();
    var ctor;
    if (hasFloat64ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-float32array/lib/main.js
var require_main41 = __commonJS({
  "node_modules/@stdlib/assert-is-float32array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasFloat32Array = typeof Float32Array === "function";
    function isFloat32Array(value) {
      return hasFloat32Array && value instanceof Float32Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Float32Array]";
    }
    module.exports = isFloat32Array;
  }
});

// node_modules/@stdlib/assert-is-float32array/lib/index.js
var require_lib46 = __commonJS({
  "node_modules/@stdlib/assert-is-float32array/lib/index.js"(exports, module) {
    "use strict";
    var isFloat32Array = require_main41();
    module.exports = isFloat32Array;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js
var require_float32array = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js"(exports, module) {
    "use strict";
    var main = typeof Float32Array === "function" ? Float32Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/main.js
var require_main42 = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/main.js"(exports, module) {
    "use strict";
    var isFloat32Array = require_lib46();
    var PINF = require_lib13();
    var GlobalFloat32Array = require_float32array();
    function hasFloat32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalFloat32Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalFloat32Array([1, 3.14, -3.14, 5e40]);
        bool = isFloat32Array(arr) && arr[0] === 1 && arr[1] === 3.140000104904175 && arr[2] === -3.140000104904175 && arr[3] === PINF;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasFloat32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/index.js
var require_lib47 = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasFloat32ArraySupport = require_main42();
    module.exports = hasFloat32ArraySupport;
  }
});

// node_modules/@stdlib/array-float32/lib/main.js
var require_main43 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Float32Array === "function" ? Float32Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-float32/lib/polyfill.js
var require_polyfill6 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-float32/lib/index.js
var require_lib48 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/index.js"(exports, module) {
    "use strict";
    var hasFloat32ArraySupport = require_lib47();
    var builtin = require_main43();
    var polyfill = require_polyfill6();
    var ctor;
    if (hasFloat32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint32array/lib/main.js
var require_main44 = __commonJS({
  "node_modules/@stdlib/assert-is-uint32array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasUint32Array = typeof Uint32Array === "function";
    function isUint32Array(value) {
      return hasUint32Array && value instanceof Uint32Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Uint32Array]";
    }
    module.exports = isUint32Array;
  }
});

// node_modules/@stdlib/assert-is-uint32array/lib/index.js
var require_lib49 = __commonJS({
  "node_modules/@stdlib/assert-is-uint32array/lib/index.js"(exports, module) {
    "use strict";
    var isUint32Array = require_main44();
    module.exports = isUint32Array;
  }
});

// node_modules/@stdlib/constants-uint32-max/lib/index.js
var require_lib50 = __commonJS({
  "node_modules/@stdlib/constants-uint32-max/lib/index.js"(exports, module) {
    "use strict";
    var UINT32_MAX = 4294967295;
    module.exports = UINT32_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js
var require_uint32array = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js"(exports, module) {
    "use strict";
    var main = typeof Uint32Array === "function" ? Uint32Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/main.js
var require_main45 = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/main.js"(exports, module) {
    "use strict";
    var isUint32Array = require_lib49();
    var UINT32_MAX = require_lib50();
    var GlobalUint32Array = require_uint32array();
    function hasUint32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint32Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT32_MAX + 1, UINT32_MAX + 2];
        arr = new GlobalUint32Array(arr);
        bool = isUint32Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === UINT32_MAX - 2 && // truncation and wrap around
        arr[3] === 0 && // wrap around
        arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasUint32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/index.js
var require_lib51 = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasUint32ArraySupport = require_main45();
    module.exports = hasUint32ArraySupport;
  }
});

// node_modules/@stdlib/array-uint32/lib/main.js
var require_main46 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Uint32Array === "function" ? Uint32Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint32/lib/polyfill.js
var require_polyfill7 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint32/lib/index.js
var require_lib52 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/index.js"(exports, module) {
    "use strict";
    var hasUint32ArraySupport = require_lib51();
    var builtin = require_main46();
    var polyfill = require_polyfill7();
    var ctor;
    if (hasUint32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-int32array/lib/main.js
var require_main47 = __commonJS({
  "node_modules/@stdlib/assert-is-int32array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasInt32Array = typeof Int32Array === "function";
    function isInt32Array(value) {
      return hasInt32Array && value instanceof Int32Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Int32Array]";
    }
    module.exports = isInt32Array;
  }
});

// node_modules/@stdlib/assert-is-int32array/lib/index.js
var require_lib53 = __commonJS({
  "node_modules/@stdlib/assert-is-int32array/lib/index.js"(exports, module) {
    "use strict";
    var isInt32Array = require_main47();
    module.exports = isInt32Array;
  }
});

// node_modules/@stdlib/constants-int32-max/lib/index.js
var require_lib54 = __commonJS({
  "node_modules/@stdlib/constants-int32-max/lib/index.js"(exports, module) {
    "use strict";
    var INT32_MAX = 2147483647 | 0;
    module.exports = INT32_MAX;
  }
});

// node_modules/@stdlib/constants-int32-min/lib/index.js
var require_lib55 = __commonJS({
  "node_modules/@stdlib/constants-int32-min/lib/index.js"(exports, module) {
    "use strict";
    var INT32_MIN = -2147483648 | 0;
    module.exports = INT32_MIN;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js
var require_int32array = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js"(exports, module) {
    "use strict";
    var main = typeof Int32Array === "function" ? Int32Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/main.js
var require_main48 = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/main.js"(exports, module) {
    "use strict";
    var isInt32Array = require_lib53();
    var INT32_MAX = require_lib54();
    var INT32_MIN = require_lib55();
    var GlobalInt32Array = require_int32array();
    function hasInt32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt32Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt32Array([1, 3.14, -3.14, INT32_MAX + 1]);
        bool = isInt32Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === -3 && // truncation
        arr[3] === INT32_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasInt32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/index.js
var require_lib56 = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasInt32ArraySupport = require_main48();
    module.exports = hasInt32ArraySupport;
  }
});

// node_modules/@stdlib/array-int32/lib/main.js
var require_main49 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Int32Array === "function" ? Int32Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-int32/lib/polyfill.js
var require_polyfill8 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int32/lib/index.js
var require_lib57 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/index.js"(exports, module) {
    "use strict";
    var hasInt32ArraySupport = require_lib56();
    var builtin = require_main49();
    var polyfill = require_polyfill8();
    var ctor;
    if (hasInt32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint16array/lib/main.js
var require_main50 = __commonJS({
  "node_modules/@stdlib/assert-is-uint16array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasUint16Array = typeof Uint16Array === "function";
    function isUint16Array(value) {
      return hasUint16Array && value instanceof Uint16Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Uint16Array]";
    }
    module.exports = isUint16Array;
  }
});

// node_modules/@stdlib/assert-is-uint16array/lib/index.js
var require_lib58 = __commonJS({
  "node_modules/@stdlib/assert-is-uint16array/lib/index.js"(exports, module) {
    "use strict";
    var isUint16Array = require_main50();
    module.exports = isUint16Array;
  }
});

// node_modules/@stdlib/constants-uint16-max/lib/index.js
var require_lib59 = __commonJS({
  "node_modules/@stdlib/constants-uint16-max/lib/index.js"(exports, module) {
    "use strict";
    var UINT16_MAX = 65535 | 0;
    module.exports = UINT16_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js
var require_uint16array = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js"(exports, module) {
    "use strict";
    var main = typeof Uint16Array === "function" ? Uint16Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/main.js
var require_main51 = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/main.js"(exports, module) {
    "use strict";
    var isUint16Array = require_lib58();
    var UINT16_MAX = require_lib59();
    var GlobalUint16Array = require_uint16array();
    function hasUint16ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint16Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT16_MAX + 1, UINT16_MAX + 2];
        arr = new GlobalUint16Array(arr);
        bool = isUint16Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === UINT16_MAX - 2 && // truncation and wrap around
        arr[3] === 0 && // wrap around
        arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasUint16ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/index.js
var require_lib60 = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasUint16ArraySupport = require_main51();
    module.exports = hasUint16ArraySupport;
  }
});

// node_modules/@stdlib/array-uint16/lib/main.js
var require_main52 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Uint16Array === "function" ? Uint16Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint16/lib/polyfill.js
var require_polyfill9 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint16/lib/index.js
var require_lib61 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/index.js"(exports, module) {
    "use strict";
    var hasUint16ArraySupport = require_lib60();
    var builtin = require_main52();
    var polyfill = require_polyfill9();
    var ctor;
    if (hasUint16ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-int16array/lib/main.js
var require_main53 = __commonJS({
  "node_modules/@stdlib/assert-is-int16array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasInt16Array = typeof Int16Array === "function";
    function isInt16Array(value) {
      return hasInt16Array && value instanceof Int16Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Int16Array]";
    }
    module.exports = isInt16Array;
  }
});

// node_modules/@stdlib/assert-is-int16array/lib/index.js
var require_lib62 = __commonJS({
  "node_modules/@stdlib/assert-is-int16array/lib/index.js"(exports, module) {
    "use strict";
    var isInt16Array = require_main53();
    module.exports = isInt16Array;
  }
});

// node_modules/@stdlib/constants-int16-max/lib/index.js
var require_lib63 = __commonJS({
  "node_modules/@stdlib/constants-int16-max/lib/index.js"(exports, module) {
    "use strict";
    var INT16_MAX = 32767 | 0;
    module.exports = INT16_MAX;
  }
});

// node_modules/@stdlib/constants-int16-min/lib/index.js
var require_lib64 = __commonJS({
  "node_modules/@stdlib/constants-int16-min/lib/index.js"(exports, module) {
    "use strict";
    var INT16_MIN = -32768 | 0;
    module.exports = INT16_MIN;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js
var require_int16array = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js"(exports, module) {
    "use strict";
    var main = typeof Int16Array === "function" ? Int16Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/main.js
var require_main54 = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/main.js"(exports, module) {
    "use strict";
    var isInt16Array = require_lib62();
    var INT16_MAX = require_lib63();
    var INT16_MIN = require_lib64();
    var GlobalInt16Array = require_int16array();
    function hasInt16ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt16Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt16Array([1, 3.14, -3.14, INT16_MAX + 1]);
        bool = isInt16Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === -3 && // truncation
        arr[3] === INT16_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasInt16ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/index.js
var require_lib65 = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasInt16ArraySupport = require_main54();
    module.exports = hasInt16ArraySupport;
  }
});

// node_modules/@stdlib/array-int16/lib/main.js
var require_main55 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Int16Array === "function" ? Int16Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-int16/lib/polyfill.js
var require_polyfill10 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int16/lib/index.js
var require_lib66 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/index.js"(exports, module) {
    "use strict";
    var hasInt16ArraySupport = require_lib65();
    var builtin = require_main55();
    var polyfill = require_polyfill10();
    var ctor;
    if (hasInt16ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint8array/lib/main.js
var require_main56 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasUint8Array = typeof Uint8Array === "function";
    function isUint8Array(value) {
      return hasUint8Array && value instanceof Uint8Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Uint8Array]";
    }
    module.exports = isUint8Array;
  }
});

// node_modules/@stdlib/assert-is-uint8array/lib/index.js
var require_lib67 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8array/lib/index.js"(exports, module) {
    "use strict";
    var isUint8Array = require_main56();
    module.exports = isUint8Array;
  }
});

// node_modules/@stdlib/constants-uint8-max/lib/index.js
var require_lib68 = __commonJS({
  "node_modules/@stdlib/constants-uint8-max/lib/index.js"(exports, module) {
    "use strict";
    var UINT8_MAX = 255 | 0;
    module.exports = UINT8_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js
var require_uint8array = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js"(exports, module) {
    "use strict";
    var main = typeof Uint8Array === "function" ? Uint8Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/main.js
var require_main57 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/main.js"(exports, module) {
    "use strict";
    var isUint8Array = require_lib67();
    var UINT8_MAX = require_lib68();
    var GlobalUint8Array = require_uint8array();
    function hasUint8ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint8Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT8_MAX + 1, UINT8_MAX + 2];
        arr = new GlobalUint8Array(arr);
        bool = isUint8Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === UINT8_MAX - 2 && // truncation and wrap around
        arr[3] === 0 && // wrap around
        arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasUint8ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/index.js
var require_lib69 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasUint8ArraySupport = require_main57();
    module.exports = hasUint8ArraySupport;
  }
});

// node_modules/@stdlib/array-uint8/lib/main.js
var require_main58 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Uint8Array === "function" ? Uint8Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint8/lib/polyfill.js
var require_polyfill11 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint8/lib/index.js
var require_lib70 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/index.js"(exports, module) {
    "use strict";
    var hasUint8ArraySupport = require_lib69();
    var builtin = require_main58();
    var polyfill = require_polyfill11();
    var ctor;
    if (hasUint8ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js
var require_main59 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasUint8ClampedArray = typeof Uint8ClampedArray === "function";
    function isUint8ClampedArray(value) {
      return hasUint8ClampedArray && value instanceof Uint8ClampedArray || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Uint8ClampedArray]";
    }
    module.exports = isUint8ClampedArray;
  }
});

// node_modules/@stdlib/assert-is-uint8clampedarray/lib/index.js
var require_lib71 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8clampedarray/lib/index.js"(exports, module) {
    "use strict";
    var isUint8ClampedArray = require_main59();
    module.exports = isUint8ClampedArray;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js
var require_uint8clampedarray = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js"(exports, module) {
    "use strict";
    var main = typeof Uint8ClampedArray === "function" ? Uint8ClampedArray : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js
var require_main60 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js"(exports, module) {
    "use strict";
    var isUint8ClampedArray = require_lib71();
    var GlobalUint8ClampedArray = require_uint8clampedarray();
    function hasUint8ClampedArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint8ClampedArray !== "function") {
        return false;
      }
      try {
        arr = new GlobalUint8ClampedArray([-1, 0, 1, 3.14, 4.99, 255, 256]);
        bool = isUint8ClampedArray(arr) && arr[0] === 0 && // clamped
        arr[1] === 0 && arr[2] === 1 && arr[3] === 3 && // round to nearest
        arr[4] === 5 && // round to nearest
        arr[5] === 255 && arr[6] === 255;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasUint8ClampedArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/index.js
var require_lib72 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/index.js"(exports, module) {
    "use strict";
    var hasUint8ClampedArraySupport = require_main60();
    module.exports = hasUint8ClampedArraySupport;
  }
});

// node_modules/@stdlib/array-uint8c/lib/main.js
var require_main61 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Uint8ClampedArray === "function" ? Uint8ClampedArray : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint8c/lib/polyfill.js
var require_polyfill12 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint8c/lib/index.js
var require_lib73 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/index.js"(exports, module) {
    "use strict";
    var hasUint8ClampedArraySupport = require_lib72();
    var builtin = require_main61();
    var polyfill = require_polyfill12();
    var ctor;
    if (hasUint8ClampedArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-int8array/lib/main.js
var require_main62 = __commonJS({
  "node_modules/@stdlib/assert-is-int8array/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasInt8Array = typeof Int8Array === "function";
    function isInt8Array(value) {
      return hasInt8Array && value instanceof Int8Array || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object Int8Array]";
    }
    module.exports = isInt8Array;
  }
});

// node_modules/@stdlib/assert-is-int8array/lib/index.js
var require_lib74 = __commonJS({
  "node_modules/@stdlib/assert-is-int8array/lib/index.js"(exports, module) {
    "use strict";
    var isInt8Array = require_main62();
    module.exports = isInt8Array;
  }
});

// node_modules/@stdlib/constants-int8-max/lib/index.js
var require_lib75 = __commonJS({
  "node_modules/@stdlib/constants-int8-max/lib/index.js"(exports, module) {
    "use strict";
    var INT8_MAX = 127 | 0;
    module.exports = INT8_MAX;
  }
});

// node_modules/@stdlib/constants-int8-min/lib/index.js
var require_lib76 = __commonJS({
  "node_modules/@stdlib/constants-int8-min/lib/index.js"(exports, module) {
    "use strict";
    var INT8_MIN = -128 | 0;
    module.exports = INT8_MIN;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js
var require_int8array = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js"(exports, module) {
    "use strict";
    var main = typeof Int8Array === "function" ? Int8Array : null;
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/main.js
var require_main63 = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/main.js"(exports, module) {
    "use strict";
    var isInt8Array = require_lib74();
    var INT8_MAX = require_lib75();
    var INT8_MIN = require_lib76();
    var GlobalInt8Array = require_int8array();
    function hasInt8ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt8Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt8Array([1, 3.14, -3.14, INT8_MAX + 1]);
        bool = isInt8Array(arr) && arr[0] === 1 && arr[1] === 3 && // truncation
        arr[2] === -3 && // truncation
        arr[3] === INT8_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module.exports = hasInt8ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/index.js
var require_lib77 = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/index.js"(exports, module) {
    "use strict";
    var hasInt8ArraySupport = require_main63();
    module.exports = hasInt8ArraySupport;
  }
});

// node_modules/@stdlib/array-int8/lib/main.js
var require_main64 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/main.js"(exports, module) {
    "use strict";
    var ctor = typeof Int8Array === "function" ? Int8Array : void 0;
    module.exports = ctor;
  }
});

// node_modules/@stdlib/array-int8/lib/polyfill.js
var require_polyfill13 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/polyfill.js"(exports, module) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int8/lib/index.js
var require_lib78 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/index.js"(exports, module) {
    "use strict";
    var hasInt8ArraySupport = require_lib77();
    var builtin = require_main64();
    var polyfill = require_polyfill13();
    var ctor;
    if (hasInt8ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-array-like-object/lib/main.js
var require_main65 = __commonJS({
  "node_modules/@stdlib/assert-is-array-like-object/lib/main.js"(exports, module) {
    "use strict";
    var isInteger = require_lib16();
    var MAX_LENGTH = require_lib19();
    function isArrayLikeObject(value) {
      return typeof value === "object" && value !== null && typeof value.length === "number" && isInteger(value.length) && value.length >= 0 && value.length <= MAX_LENGTH;
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/@stdlib/assert-is-array-like-object/lib/index.js
var require_lib79 = __commonJS({
  "node_modules/@stdlib/assert-is-array-like-object/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main65();
    module.exports = main;
  }
});

// node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js
var require_lib80 = __commonJS({
  "node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js"(exports, module) {
    "use strict";
    var MAX_TYPED_ARRAY_LENGTH = 9007199254740991;
    module.exports = MAX_TYPED_ARRAY_LENGTH;
  }
});

// node_modules/@stdlib/assert-is-collection/lib/main.js
var require_main66 = __commonJS({
  "node_modules/@stdlib/assert-is-collection/lib/main.js"(exports, module) {
    "use strict";
    var isInteger = require_lib16();
    var MAX_LENGTH = require_lib80();
    function isCollection(value) {
      return typeof value === "object" && value !== null && typeof value.length === "number" && isInteger(value.length) && value.length >= 0 && value.length <= MAX_LENGTH;
    }
    module.exports = isCollection;
  }
});

// node_modules/@stdlib/assert-is-collection/lib/index.js
var require_lib81 = __commonJS({
  "node_modules/@stdlib/assert-is-collection/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main66();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-arraybuffer/lib/main.js
var require_main67 = __commonJS({
  "node_modules/@stdlib/assert-is-arraybuffer/lib/main.js"(exports, module) {
    "use strict";
    var nativeClass = require_lib10();
    var hasArrayBuffer = typeof ArrayBuffer === "function";
    function isArrayBuffer(value) {
      return hasArrayBuffer && value instanceof ArrayBuffer || // eslint-disable-line stdlib/require-globals
      nativeClass(value) === "[object ArrayBuffer]";
    }
    module.exports = isArrayBuffer;
  }
});

// node_modules/@stdlib/assert-is-arraybuffer/lib/index.js
var require_lib82 = __commonJS({
  "node_modules/@stdlib/assert-is-arraybuffer/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main67();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-string/lib/primitive.js
var require_primitive5 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/primitive.js"(exports, module) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/valueof.js
var require_valueof = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/valueof.js"(exports, module) {
    "use strict";
    var valueOf = String.prototype.valueOf;
    module.exports = valueOf;
  }
});

// node_modules/@stdlib/assert-is-string/lib/try2valueof.js
var require_try2valueof = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/try2valueof.js"(exports, module) {
    "use strict";
    var valueOf = require_valueof();
    function test(value) {
      try {
        valueOf.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = test;
  }
});

// node_modules/@stdlib/assert-is-string/lib/object.js
var require_object5 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/object.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_lib7();
    var nativeClass = require_lib10();
    var test = require_try2valueof();
    var FLG = hasToStringTag();
    function isString(value) {
      if (typeof value === "object") {
        if (value instanceof String) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object String]";
      }
      return false;
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/main.js
var require_main68 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/main.js"(exports, module) {
    "use strict";
    var isPrimitive = require_primitive5();
    var isObject = require_object5();
    function isString(value) {
      return isPrimitive(value) || isObject(value);
    }
    module.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/index.js
var require_lib83 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main68();
    var isPrimitive = require_primitive5();
    var isObject = require_object5();
    setReadOnly(main, "isPrimitive", isPrimitive);
    setReadOnly(main, "isObject", isObject);
    module.exports = main;
  }
});

// node_modules/@stdlib/complex-float64/lib/tostring.js
var require_tostring4 = __commonJS({
  "node_modules/@stdlib/complex-float64/lib/tostring.js"(exports, module) {
    "use strict";
    function toString() {
      var str = "" + this.re;
      if (this.im < 0) {
        str += " - " + -this.im;
      } else {
        str += " + " + this.im;
      }
      str += "i";
      return str;
    }
    module.exports = toString;
  }
});

// node_modules/@stdlib/complex-float64/lib/tojson.js
var require_tojson = __commonJS({
  "node_modules/@stdlib/complex-float64/lib/tojson.js"(exports, module) {
    "use strict";
    function toJSON() {
      var out = {};
      out.type = "Complex128";
      out.re = this.re;
      out.im = this.im;
      return out;
    }
    module.exports = toJSON;
  }
});

// node_modules/@stdlib/complex-float64/lib/main.js
var require_main69 = __commonJS({
  "node_modules/@stdlib/complex-float64/lib/main.js"(exports, module) {
    "use strict";
    var isNumber = require_lib12().isPrimitive;
    var defineProperty = require_lib4();
    var setReadOnly = require_lib5();
    var format = require_lib3();
    var toStr = require_tostring4();
    var toJSON = require_tojson();
    function Complex128(real, imag) {
      if (!(this instanceof Complex128)) {
        throw new TypeError("invalid invocation. Constructor must be called with the `new` keyword.");
      }
      if (!isNumber(real)) {
        throw new TypeError(format("invalid argument. Real component must be a number. Value: `%s`.", real));
      }
      if (!isNumber(imag)) {
        throw new TypeError(format("invalid argument. Imaginary component must be a number. Value: `%s`.", imag));
      }
      defineProperty(this, "re", {
        "configurable": false,
        "enumerable": true,
        "writable": false,
        "value": real
      });
      defineProperty(this, "im", {
        "configurable": false,
        "enumerable": true,
        "writable": false,
        "value": imag
      });
      return this;
    }
    setReadOnly(Complex128, "BYTES_PER_ELEMENT", 8);
    setReadOnly(Complex128.prototype, "BYTES_PER_ELEMENT", 8);
    setReadOnly(Complex128.prototype, "byteLength", 16);
    setReadOnly(Complex128.prototype, "toString", toStr);
    setReadOnly(Complex128.prototype, "toJSON", toJSON);
    module.exports = Complex128;
  }
});

// node_modules/@stdlib/complex-float64/lib/index.js
var require_lib84 = __commonJS({
  "node_modules/@stdlib/complex-float64/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main69();
    module.exports = main;
  }
});

// node_modules/@stdlib/number-float64-base-to-float32/lib/main.js
var require_main70 = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-float32/lib/main.js"(exports, module) {
    "use strict";
    var fround = typeof Math.fround === "function" ? Math.fround : null;
    module.exports = fround;
  }
});

// node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js
var require_polyfill14 = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-float32/lib/polyfill.js"(exports, module) {
    "use strict";
    var Float32Array2 = require_lib48();
    var FLOAT32_VIEW = new Float32Array2(1);
    function float64ToFloat32(x) {
      FLOAT32_VIEW[0] = x;
      return FLOAT32_VIEW[0];
    }
    module.exports = float64ToFloat32;
  }
});

// node_modules/@stdlib/number-float64-base-to-float32/lib/index.js
var require_lib85 = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-float32/lib/index.js"(exports, module) {
    "use strict";
    var builtin = require_main70();
    var polyfill = require_polyfill14();
    var float64ToFloat32;
    if (typeof builtin === "function") {
      float64ToFloat32 = builtin;
    } else {
      float64ToFloat32 = polyfill;
    }
    module.exports = float64ToFloat32;
  }
});

// node_modules/@stdlib/complex-float32/lib/tostring.js
var require_tostring5 = __commonJS({
  "node_modules/@stdlib/complex-float32/lib/tostring.js"(exports, module) {
    "use strict";
    function toString() {
      var str = "" + this.re;
      if (this.im < 0) {
        str += " - " + -this.im;
      } else {
        str += " + " + this.im;
      }
      str += "i";
      return str;
    }
    module.exports = toString;
  }
});

// node_modules/@stdlib/complex-float32/lib/tojson.js
var require_tojson2 = __commonJS({
  "node_modules/@stdlib/complex-float32/lib/tojson.js"(exports, module) {
    "use strict";
    function toJSON() {
      var out = {};
      out.type = "Complex64";
      out.re = this.re;
      out.im = this.im;
      return out;
    }
    module.exports = toJSON;
  }
});

// node_modules/@stdlib/complex-float32/lib/main.js
var require_main71 = __commonJS({
  "node_modules/@stdlib/complex-float32/lib/main.js"(exports, module) {
    "use strict";
    var isNumber = require_lib12().isPrimitive;
    var defineProperty = require_lib4();
    var setReadOnly = require_lib5();
    var float64ToFloat32 = require_lib85();
    var format = require_lib3();
    var toStr = require_tostring5();
    var toJSON = require_tojson2();
    function Complex64(real, imag) {
      if (!(this instanceof Complex64)) {
        throw new TypeError("invalid invocation. Constructor must be called with the `new` keyword.");
      }
      if (!isNumber(real)) {
        throw new TypeError(format("invalid argument. Real component must be a number. Value: `%s`.", real));
      }
      if (!isNumber(imag)) {
        throw new TypeError(format("invalid argument. Imaginary component must be a number. Value: `%s`.", imag));
      }
      defineProperty(this, "re", {
        "configurable": false,
        "enumerable": true,
        "writable": false,
        "value": float64ToFloat32(real)
      });
      defineProperty(this, "im", {
        "configurable": false,
        "enumerable": true,
        "writable": false,
        "value": float64ToFloat32(imag)
      });
      return this;
    }
    setReadOnly(Complex64, "BYTES_PER_ELEMENT", 4);
    setReadOnly(Complex64.prototype, "BYTES_PER_ELEMENT", 4);
    setReadOnly(Complex64.prototype, "byteLength", 8);
    setReadOnly(Complex64.prototype, "toString", toStr);
    setReadOnly(Complex64.prototype, "toJSON", toJSON);
    module.exports = Complex64;
  }
});

// node_modules/@stdlib/complex-float32/lib/index.js
var require_lib86 = __commonJS({
  "node_modules/@stdlib/complex-float32/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main71();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-is-complex-like/lib/main.js
var require_main72 = __commonJS({
  "node_modules/@stdlib/assert-is-complex-like/lib/main.js"(exports, module) {
    "use strict";
    var Complex128 = require_lib84();
    var Complex64 = require_lib86();
    function isComplexLike(value) {
      if (value instanceof Complex128 || value instanceof Complex64) {
        return true;
      }
      return typeof value === "object" && value !== null && typeof value.re === "number" && typeof value.im === "number";
    }
    module.exports = isComplexLike;
  }
});

// node_modules/@stdlib/assert-is-complex-like/lib/index.js
var require_lib87 = __commonJS({
  "node_modules/@stdlib/assert-is-complex-like/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main72();
    module.exports = main;
  }
});

// node_modules/@stdlib/math-base-assert-is-even/lib/main.js
var require_main73 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-even/lib/main.js"(exports, module) {
    "use strict";
    var isInteger = require_lib16();
    function isEven(x) {
      return isInteger(x / 2);
    }
    module.exports = isEven;
  }
});

// node_modules/@stdlib/math-base-assert-is-even/lib/index.js
var require_lib88 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-even/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main73();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-assert-is-complex64array/lib/main.js
var require_main74 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-complex64array/lib/main.js"(exports, module) {
    "use strict";
    var BYTES_PER_ELEMENT = 8;
    function isComplex64Array(value) {
      return typeof value === "object" && value !== null && value.constructor.name === "Complex64Array" && value.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT;
    }
    module.exports = isComplex64Array;
  }
});

// node_modules/@stdlib/array-base-assert-is-complex64array/lib/index.js
var require_lib89 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-complex64array/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main74();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-assert-is-complex128array/lib/main.js
var require_main75 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-complex128array/lib/main.js"(exports, module) {
    "use strict";
    var BYTES_PER_ELEMENT = 16;
    function isComplex128Array(value) {
      return typeof value === "object" && value !== null && value.constructor.name === "Complex128Array" && value.BYTES_PER_ELEMENT === BYTES_PER_ELEMENT;
    }
    module.exports = isComplex128Array;
  }
});

// node_modules/@stdlib/array-base-assert-is-complex128array/lib/index.js
var require_lib90 = __commonJS({
  "node_modules/@stdlib/array-base-assert-is-complex128array/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main75();
    module.exports = main;
  }
});

// node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js
var require_main76 = __commonJS({
  "node_modules/@stdlib/assert-has-iterator-symbol-support/lib/main.js"(exports, module) {
    "use strict";
    var hasOwnProp = require_lib8();
    var Symbol2 = require_lib9();
    function hasIteratorSymbolSupport() {
      return typeof Symbol2 === "function" && typeof Symbol2("foo") === "symbol" && hasOwnProp(Symbol2, "iterator") && typeof Symbol2.iterator === "symbol";
    }
    module.exports = hasIteratorSymbolSupport;
  }
});

// node_modules/@stdlib/assert-has-iterator-symbol-support/lib/index.js
var require_lib91 = __commonJS({
  "node_modules/@stdlib/assert-has-iterator-symbol-support/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main76();
    module.exports = main;
  }
});

// node_modules/@stdlib/symbol-iterator/lib/main.js
var require_main77 = __commonJS({
  "node_modules/@stdlib/symbol-iterator/lib/main.js"(exports, module) {
    "use strict";
    var hasIteratorSymbolSupport = require_lib91();
    var IteratorSymbol = hasIteratorSymbolSupport() ? Symbol.iterator : null;
    module.exports = IteratorSymbol;
  }
});

// node_modules/@stdlib/symbol-iterator/lib/index.js
var require_lib92 = __commonJS({
  "node_modules/@stdlib/symbol-iterator/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main77();
    module.exports = main;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js
var require_main78 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js"(exports, module) {
    "use strict";
    var defineProperty = require_lib4();
    function setNonEnumerableReadOnlyAccessor(obj, prop, getter) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "get": getter
      });
    }
    module.exports = setNonEnumerableReadOnlyAccessor;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/index.js
var require_lib93 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main78();
    module.exports = main;
  }
});

// node_modules/@stdlib/complex-realf/lib/main.js
var require_main79 = __commonJS({
  "node_modules/@stdlib/complex-realf/lib/main.js"(exports, module) {
    "use strict";
    function realf(z) {
      return z.re;
    }
    module.exports = realf;
  }
});

// node_modules/@stdlib/complex-realf/lib/index.js
var require_lib94 = __commonJS({
  "node_modules/@stdlib/complex-realf/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main79();
    module.exports = main;
  }
});

// node_modules/@stdlib/complex-imagf/lib/main.js
var require_main80 = __commonJS({
  "node_modules/@stdlib/complex-imagf/lib/main.js"(exports, module) {
    "use strict";
    function imagf(z) {
      return z.im;
    }
    module.exports = imagf;
  }
});

// node_modules/@stdlib/complex-imagf/lib/index.js
var require_lib95 = __commonJS({
  "node_modules/@stdlib/complex-imagf/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main80();
    module.exports = main;
  }
});

// node_modules/@stdlib/strided-base-reinterpret-complex64/lib/main.js
var require_main81 = __commonJS({
  "node_modules/@stdlib/strided-base-reinterpret-complex64/lib/main.js"(exports, module) {
    "use strict";
    var Float32Array2 = require_lib48();
    function reinterpret(x, offset) {
      return new Float32Array2(x.buffer, x.byteOffset + x.BYTES_PER_ELEMENT * offset, 2 * (x.length - offset));
    }
    module.exports = reinterpret;
  }
});

// node_modules/@stdlib/strided-base-reinterpret-complex64/lib/index.js
var require_lib96 = __commonJS({
  "node_modules/@stdlib/strided-base-reinterpret-complex64/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main81();
    module.exports = main;
  }
});

// node_modules/@stdlib/strided-base-reinterpret-complex128/lib/main.js
var require_main82 = __commonJS({
  "node_modules/@stdlib/strided-base-reinterpret-complex128/lib/main.js"(exports, module) {
    "use strict";
    var Float64Array2 = require_lib45();
    function reinterpret(x, offset) {
      return new Float64Array2(x.buffer, x.byteOffset + x.BYTES_PER_ELEMENT * offset, 2 * (x.length - offset));
    }
    module.exports = reinterpret;
  }
});

// node_modules/@stdlib/strided-base-reinterpret-complex128/lib/index.js
var require_lib97 = __commonJS({
  "node_modules/@stdlib/strided-base-reinterpret-complex128/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main82();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-complex64/lib/from_iterator.js
var require_from_iterator = __commonJS({
  "node_modules/@stdlib/array-complex64/lib/from_iterator.js"(exports, module) {
    "use strict";
    var isArrayLikeObject = require_lib79();
    var isComplexLike = require_lib87();
    var realf = require_lib94();
    var imagf = require_lib95();
    var format = require_lib3();
    function fromIterator(it) {
      var out;
      var v;
      var z;
      out = [];
      while (true) {
        v = it.next();
        if (v.done) {
          break;
        }
        z = v.value;
        if (isArrayLikeObject(z) && z.length >= 2) {
          out.push(z[0], z[1]);
        } else if (isComplexLike(z)) {
          out.push(realf(z), imagf(z));
        } else {
          return new TypeError(format("invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", z));
        }
      }
      return out;
    }
    module.exports = fromIterator;
  }
});

// node_modules/@stdlib/array-complex64/lib/from_iterator_map.js
var require_from_iterator_map = __commonJS({
  "node_modules/@stdlib/array-complex64/lib/from_iterator_map.js"(exports, module) {
    "use strict";
    var isArrayLikeObject = require_lib79();
    var isComplexLike = require_lib87();
    var realf = require_lib94();
    var imagf = require_lib95();
    var format = require_lib3();
    function fromIteratorMap(it, clbk, thisArg) {
      var out;
      var v;
      var z;
      var i;
      out = [];
      i = -1;
      while (true) {
        v = it.next();
        if (v.done) {
          break;
        }
        i += 1;
        z = clbk.call(thisArg, v.value, i);
        if (isArrayLikeObject(z) && z.length >= 2) {
          out.push(z[0], z[1]);
        } else if (isComplexLike(z)) {
          out.push(realf(z), imagf(z));
        } else {
          return new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", z));
        }
      }
      return out;
    }
    module.exports = fromIteratorMap;
  }
});

// node_modules/@stdlib/array-complex64/lib/from_array.js
var require_from_array = __commonJS({
  "node_modules/@stdlib/array-complex64/lib/from_array.js"(exports, module) {
    "use strict";
    var isComplexLike = require_lib87();
    var realf = require_lib94();
    var imagf = require_lib95();
    function fromArray(buf, arr) {
      var len;
      var v;
      var i;
      var j;
      len = arr.length;
      j = 0;
      for (i = 0; i < len; i++) {
        v = arr[i];
        if (!isComplexLike(v)) {
          return null;
        }
        buf[j] = realf(v);
        buf[j + 1] = imagf(v);
        j += 2;
      }
      return buf;
    }
    module.exports = fromArray;
  }
});

// node_modules/@stdlib/array-complex64/lib/main.js
var require_main83 = __commonJS({
  "node_modules/@stdlib/array-complex64/lib/main.js"(exports, module) {
    "use strict";
    var isNonNegativeInteger = require_lib18().isPrimitive;
    var isArrayLikeObject = require_lib79();
    var isCollection = require_lib81();
    var isArrayBuffer = require_lib82();
    var isObject = require_lib25();
    var isArray = require_lib24();
    var isString = require_lib83().isPrimitive;
    var isFunction = require_lib34();
    var isComplexLike = require_lib87();
    var isEven = require_lib88();
    var isInteger = require_lib16();
    var isComplex64Array = require_lib89();
    var isComplex128Array = require_lib90();
    var hasIteratorSymbolSupport = require_lib91();
    var ITERATOR_SYMBOL = require_lib92();
    var setReadOnly = require_lib5();
    var setReadOnlyAccessor = require_lib93();
    var Float32Array2 = require_lib48();
    var Complex64 = require_lib86();
    var format = require_lib3();
    var realf = require_lib94();
    var imagf = require_lib95();
    var floor = require_lib15();
    var reinterpret64 = require_lib96();
    var reinterpret128 = require_lib97();
    var getter = require_lib42();
    var accessorGetter = require_lib41();
    var fromIterator = require_from_iterator();
    var fromIteratorMap = require_from_iterator_map();
    var fromArray = require_from_array();
    var BYTES_PER_ELEMENT = Float32Array2.BYTES_PER_ELEMENT * 2;
    var HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();
    function isComplexArray(value) {
      return value instanceof Complex64Array || typeof value === "object" && value !== null && (value.constructor.name === "Complex64Array" || value.constructor.name === "Complex128Array") && typeof value._length === "number" && // eslint-disable-line no-underscore-dangle
      // NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...
      typeof value._buffer === "object";
    }
    function isComplexArrayConstructor(value) {
      return value === Complex64Array || // NOTE: weaker test in order to avoid a circular dependency with Complex128Array...
      value.name === "Complex128Array";
    }
    function getComplex64(buf, idx) {
      idx *= 2;
      return new Complex64(buf[idx], buf[idx + 1]);
    }
    function Complex64Array() {
      var byteOffset;
      var nargs;
      var buf;
      var len;
      nargs = arguments.length;
      if (!(this instanceof Complex64Array)) {
        if (nargs === 0) {
          return new Complex64Array();
        }
        if (nargs === 1) {
          return new Complex64Array(arguments[0]);
        }
        if (nargs === 2) {
          return new Complex64Array(arguments[0], arguments[1]);
        }
        return new Complex64Array(arguments[0], arguments[1], arguments[2]);
      }
      if (nargs === 0) {
        buf = new Float32Array2(0);
      } else if (nargs === 1) {
        if (isNonNegativeInteger(arguments[0])) {
          buf = new Float32Array2(arguments[0] * 2);
        } else if (isCollection(arguments[0])) {
          buf = arguments[0];
          len = buf.length;
          if (len && isArray(buf) && isComplexLike(buf[0])) {
            buf = fromArray(new Float32Array2(len * 2), buf);
            if (buf === null) {
              if (!isEven(len)) {
                throw new RangeError(format("invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.", len));
              }
              buf = new Float32Array2(arguments[0]);
            }
          } else {
            if (isComplex64Array(buf)) {
              buf = reinterpret64(buf, 0);
            } else if (isComplex128Array(buf)) {
              buf = reinterpret128(buf, 0);
            } else if (!isEven(len)) {
              throw new RangeError(format("invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.", len));
            }
            buf = new Float32Array2(buf);
          }
        } else if (isArrayBuffer(arguments[0])) {
          buf = arguments[0];
          if (!isInteger(buf.byteLength / BYTES_PER_ELEMENT)) {
            throw new RangeError(format("invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.", BYTES_PER_ELEMENT, buf.byteLength));
          }
          buf = new Float32Array2(buf);
        } else if (isObject(arguments[0])) {
          buf = arguments[0];
          if (HAS_ITERATOR_SYMBOL === false) {
            throw new TypeError(format("invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.", buf));
          }
          if (!isFunction(buf[ITERATOR_SYMBOL])) {
            throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", buf));
          }
          buf = buf[ITERATOR_SYMBOL]();
          if (!isFunction(buf.next)) {
            throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", buf));
          }
          buf = fromIterator(buf);
          if (buf instanceof Error) {
            throw buf;
          }
          buf = new Float32Array2(buf);
        } else {
          throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", arguments[0]));
        }
      } else {
        buf = arguments[0];
        if (!isArrayBuffer(buf)) {
          throw new TypeError(format("invalid argument. First argument must be an ArrayBuffer. Value: `%s`.", buf));
        }
        byteOffset = arguments[1];
        if (!isNonNegativeInteger(byteOffset)) {
          throw new TypeError(format("invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.", byteOffset));
        }
        if (!isInteger(byteOffset / BYTES_PER_ELEMENT)) {
          throw new RangeError(format("invalid argument. Byte offset must be a multiple of %u. Value: `%u`.", BYTES_PER_ELEMENT, byteOffset));
        }
        if (nargs === 2) {
          len = buf.byteLength - byteOffset;
          if (!isInteger(len / BYTES_PER_ELEMENT)) {
            throw new RangeError(format("invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.", BYTES_PER_ELEMENT, len));
          }
          buf = new Float32Array2(buf, byteOffset);
        } else {
          len = arguments[2];
          if (!isNonNegativeInteger(len)) {
            throw new TypeError(format("invalid argument. Length must be a nonnegative integer. Value: `%s`.", len));
          }
          if (len * BYTES_PER_ELEMENT > buf.byteLength - byteOffset) {
            throw new RangeError(format("invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.", len * BYTES_PER_ELEMENT));
          }
          buf = new Float32Array2(buf, byteOffset, len * 2);
        }
      }
      setReadOnly(this, "_buffer", buf);
      setReadOnly(this, "_length", buf.length / 2);
      return this;
    }
    setReadOnly(Complex64Array, "BYTES_PER_ELEMENT", BYTES_PER_ELEMENT);
    setReadOnly(Complex64Array, "name", "Complex64Array");
    setReadOnly(Complex64Array, "from", function from(src) {
      var thisArg;
      var nargs;
      var clbk;
      var out;
      var buf;
      var tmp;
      var get;
      var len;
      var flg;
      var v;
      var i;
      var j;
      if (!isFunction(this)) {
        throw new TypeError("invalid invocation. `this` context must be a constructor.");
      }
      if (!isComplexArrayConstructor(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      nargs = arguments.length;
      if (nargs > 1) {
        clbk = arguments[1];
        if (!isFunction(clbk)) {
          throw new TypeError(format("invalid argument. Second argument must be a function. Value: `%s`.", clbk));
        }
        if (nargs > 2) {
          thisArg = arguments[2];
        }
      }
      if (isComplexArray(src)) {
        len = src.length;
        if (clbk) {
          out = new this(len);
          buf = out._buffer;
          j = 0;
          for (i = 0; i < len; i++) {
            v = clbk.call(thisArg, src.get(i), i);
            if (isComplexLike(v)) {
              buf[j] = realf(v);
              buf[j + 1] = imagf(v);
            } else if (isArrayLikeObject(v) && v.length >= 2) {
              buf[j] = v[0];
              buf[j + 1] = v[1];
            } else {
              throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
            }
            j += 2;
          }
          return out;
        }
        return new this(src);
      }
      if (isCollection(src)) {
        if (clbk) {
          len = src.length;
          if (src.get && src.set) {
            get = accessorGetter("default");
          } else {
            get = getter("default");
          }
          for (i = 0; i < len; i++) {
            if (!isComplexLike(get(src, i))) {
              flg = true;
              break;
            }
          }
          if (flg) {
            if (!isEven(len)) {
              throw new RangeError(format("invalid argument. First argument must have a length which is a multiple of %u. Length: `%u`.", 2, len));
            }
            out = new this(len / 2);
            buf = out._buffer;
            for (i = 0; i < len; i++) {
              buf[i] = clbk.call(thisArg, get(src, i), i);
            }
            return out;
          }
          out = new this(len);
          buf = out._buffer;
          j = 0;
          for (i = 0; i < len; i++) {
            v = clbk.call(thisArg, get(src, i), i);
            if (isComplexLike(v)) {
              buf[j] = realf(v);
              buf[j + 1] = imagf(v);
            } else if (isArrayLikeObject(v) && v.length >= 2) {
              buf[j] = v[0];
              buf[j + 1] = v[1];
            } else {
              throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
            }
            j += 2;
          }
          return out;
        }
        return new this(src);
      }
      if (isObject(src) && HAS_ITERATOR_SYMBOL && isFunction(src[ITERATOR_SYMBOL])) {
        buf = src[ITERATOR_SYMBOL]();
        if (!isFunction(buf.next)) {
          throw new TypeError(format("invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.", src));
        }
        if (clbk) {
          tmp = fromIteratorMap(buf, clbk, thisArg);
        } else {
          tmp = fromIterator(buf);
        }
        if (tmp instanceof Error) {
          throw tmp;
        }
        len = tmp.length / 2;
        out = new this(len);
        buf = out._buffer;
        for (i = 0; i < len; i++) {
          buf[i] = tmp[i];
        }
        return out;
      }
      throw new TypeError(format("invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.", src));
    });
    setReadOnly(Complex64Array, "of", function of() {
      var args;
      var i;
      if (!isFunction(this)) {
        throw new TypeError("invalid invocation. `this` context must be a constructor.");
      }
      if (!isComplexArrayConstructor(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      args = [];
      for (i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      return new this(args);
    });
    setReadOnly(Complex64Array.prototype, "at", function at(idx) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isInteger(idx)) {
        throw new TypeError(format("invalid argument. Must provide an integer. Value: `%s`.", idx));
      }
      if (idx < 0) {
        idx += this._length;
      }
      if (idx < 0 || idx >= this._length) {
        return;
      }
      return getComplex64(this._buffer, idx);
    });
    setReadOnlyAccessor(Complex64Array.prototype, "buffer", function get() {
      return this._buffer.buffer;
    });
    setReadOnlyAccessor(Complex64Array.prototype, "byteLength", function get() {
      return this._buffer.byteLength;
    });
    setReadOnlyAccessor(Complex64Array.prototype, "byteOffset", function get() {
      return this._buffer.byteOffset;
    });
    setReadOnly(Complex64Array.prototype, "BYTES_PER_ELEMENT", Complex64Array.BYTES_PER_ELEMENT);
    setReadOnly(Complex64Array.prototype, "copyWithin", function copyWithin(target, start) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (arguments.length === 2) {
        this._buffer.copyWithin(target * 2, start * 2);
      } else {
        this._buffer.copyWithin(target * 2, start * 2, arguments[2] * 2);
      }
      return this;
    });
    setReadOnly(Complex64Array.prototype, "entries", function entries() {
      var buffer;
      var self2;
      var iter;
      var len;
      var FLG;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      self2 = this;
      buffer = this._buffer;
      len = this._length;
      i = -1;
      j = -2;
      iter = {};
      setReadOnly(iter, "next", next);
      setReadOnly(iter, "return", end);
      if (ITERATOR_SYMBOL) {
        setReadOnly(iter, ITERATOR_SYMBOL, factory);
      }
      return iter;
      function next() {
        var z;
        i += 1;
        if (FLG || i >= len) {
          return {
            "done": true
          };
        }
        j += 2;
        z = new Complex64(buffer[j], buffer[j + 1]);
        return {
          "value": [i, z],
          "done": false
        };
      }
      function end(value) {
        FLG = true;
        if (arguments.length) {
          return {
            "value": value,
            "done": true
          };
        }
        return {
          "done": true
        };
      }
      function factory() {
        return self2.entries();
      }
    });
    setReadOnly(Complex64Array.prototype, "every", function every(predicate, thisArg) {
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        if (!predicate.call(thisArg, getComplex64(buf, i), i, this)) {
          return false;
        }
      }
      return true;
    });
    setReadOnly(Complex64Array.prototype, "fill", function fill(value, start, end) {
      var buf;
      var len;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(value)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", value));
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length > 1) {
        if (!isInteger(start)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", start));
        }
        if (start < 0) {
          start += len;
          if (start < 0) {
            start = 0;
          }
        }
        if (arguments.length > 2) {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Third argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          }
          if (end > len) {
            end = len;
          }
        } else {
          end = len;
        }
      } else {
        start = 0;
        end = len;
      }
      re = realf(value);
      im = imagf(value);
      for (i = start; i < end; i++) {
        idx = 2 * i;
        buf[idx] = re;
        buf[idx + 1] = im;
      }
      return this;
    });
    setReadOnly(Complex64Array.prototype, "filter", function filter(predicate, thisArg) {
      var buf;
      var out;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      out = [];
      for (i = 0; i < this._length; i++) {
        z = getComplex64(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          out.push(z);
        }
      }
      return new this.constructor(out);
    });
    setReadOnly(Complex64Array.prototype, "find", function find(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex64(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return z;
        }
      }
    });
    setReadOnly(Complex64Array.prototype, "findIndex", function findIndex(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex64(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex64Array.prototype, "findLast", function findLast(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = this._length - 1; i >= 0; i--) {
        z = getComplex64(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return z;
        }
      }
    });
    setReadOnly(Complex64Array.prototype, "findLastIndex", function findLastIndex(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = this._length - 1; i >= 0; i--) {
        z = getComplex64(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex64Array.prototype, "forEach", function forEach(fcn, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(fcn)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", fcn));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex64(buf, i);
        fcn.call(thisArg, z, i, this);
      }
    });
    setReadOnly(Complex64Array.prototype, "get", function get(idx) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isNonNegativeInteger(idx)) {
        throw new TypeError(format("invalid argument. Must provide a nonnegative integer. Value: `%s`.", idx));
      }
      if (idx >= this._length) {
        return;
      }
      return getComplex64(this._buffer, idx);
    });
    setReadOnly(Complex64Array.prototype, "includes", function includes(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex < 0) {
          fromIndex += this._length;
          if (fromIndex < 0) {
            fromIndex = 0;
          }
        }
      } else {
        fromIndex = 0;
      }
      re = realf(searchElement);
      im = imagf(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i < this._length; i++) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return true;
        }
      }
      return false;
    });
    setReadOnly(Complex64Array.prototype, "indexOf", function indexOf(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex < 0) {
          fromIndex += this._length;
          if (fromIndex < 0) {
            fromIndex = 0;
          }
        }
      } else {
        fromIndex = 0;
      }
      re = realf(searchElement);
      im = imagf(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i < this._length; i++) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex64Array.prototype, "join", function join(separator) {
      var out;
      var buf;
      var sep;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (arguments.length === 0) {
        sep = ",";
      } else if (isString(separator)) {
        sep = separator;
      } else {
        throw new TypeError(format("invalid argument. First argument must be a string. Value: `%s`.", separator));
      }
      out = [];
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        out.push(getComplex64(buf, i).toString());
      }
      return out.join(sep);
    });
    setReadOnly(Complex64Array.prototype, "lastIndexOf", function lastIndexOf(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex >= this._length) {
          fromIndex = this._length - 1;
        } else if (fromIndex < 0) {
          fromIndex += this._length;
        }
      } else {
        fromIndex = this._length - 1;
      }
      re = realf(searchElement);
      im = imagf(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i >= 0; i--) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return i;
        }
      }
      return -1;
    });
    setReadOnlyAccessor(Complex64Array.prototype, "length", function get() {
      return this._length;
    });
    setReadOnly(Complex64Array.prototype, "map", function map(fcn, thisArg) {
      var outbuf;
      var buf;
      var out;
      var i;
      var v;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(fcn)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", fcn));
      }
      buf = this._buffer;
      out = new this.constructor(this._length);
      outbuf = out._buffer;
      for (i = 0; i < this._length; i++) {
        v = fcn.call(thisArg, getComplex64(buf, i), i, this);
        if (isComplexLike(v)) {
          outbuf[2 * i] = realf(v);
          outbuf[2 * i + 1] = imagf(v);
        } else if (isArrayLikeObject(v) && v.length === 2) {
          outbuf[2 * i] = v[0];
          outbuf[2 * i + 1] = v[1];
        } else {
          throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
        }
      }
      return out;
    });
    setReadOnly(Complex64Array.prototype, "reduce", function reduce(reducer, initialValue) {
      var buf;
      var acc;
      var len;
      var v;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(reducer)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", reducer));
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length > 1) {
        acc = initialValue;
        i = 0;
      } else {
        if (len === 0) {
          throw new Error("invalid operation. If not provided an initial value, an array must contain at least one element.");
        }
        acc = getComplex64(buf, 0);
        i = 1;
      }
      for (; i < len; i++) {
        v = getComplex64(buf, i);
        acc = reducer(acc, v, i, this);
      }
      return acc;
    });
    setReadOnly(Complex64Array.prototype, "reverse", function reverse() {
      var buf;
      var tmp;
      var len;
      var N;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      len = this._length;
      buf = this._buffer;
      N = floor(len / 2);
      for (i = 0; i < N; i++) {
        j = len - i - 1;
        tmp = buf[2 * i];
        buf[2 * i] = buf[2 * j];
        buf[2 * j] = tmp;
        tmp = buf[2 * i + 1];
        buf[2 * i + 1] = buf[2 * j + 1];
        buf[2 * j + 1] = tmp;
      }
      return this;
    });
    setReadOnly(Complex64Array.prototype, "set", function set(value) {
      var sbuf;
      var idx;
      var buf;
      var tmp;
      var flg;
      var N;
      var v;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      if (arguments.length > 1) {
        idx = arguments[1];
        if (!isNonNegativeInteger(idx)) {
          throw new TypeError(format("invalid argument. Index argument must be a nonnegative integer. Value: `%s`.", idx));
        }
      } else {
        idx = 0;
      }
      if (isComplexLike(value)) {
        if (idx >= this._length) {
          throw new RangeError(format("invalid argument. Index argument is out-of-bounds. Value: `%u`.", idx));
        }
        idx *= 2;
        buf[idx] = realf(value);
        buf[idx + 1] = imagf(value);
        return;
      }
      if (isComplexArray(value)) {
        N = value._length;
        if (idx + N > this._length) {
          throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
        }
        sbuf = value._buffer;
        j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
        if (sbuf.buffer === buf.buffer && (sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j)) {
          tmp = new Float32Array2(sbuf.length);
          for (i = 0; i < sbuf.length; i++) {
            tmp[i] = sbuf[i];
          }
          sbuf = tmp;
        }
        idx *= 2;
        j = 0;
        for (i = 0; i < N; i++) {
          buf[idx] = sbuf[j];
          buf[idx + 1] = sbuf[j + 1];
          idx += 2;
          j += 2;
        }
        return;
      }
      if (isCollection(value)) {
        N = value.length;
        for (i = 0; i < N; i++) {
          if (!isComplexLike(value[i])) {
            flg = true;
            break;
          }
        }
        if (flg) {
          if (!isEven(N)) {
            throw new RangeError(format("invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.", N));
          }
          if (idx + N / 2 > this._length) {
            throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
          }
          sbuf = value;
          j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
          if (sbuf.buffer === buf.buffer && (sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j)) {
            tmp = new Float32Array2(N);
            for (i = 0; i < N; i++) {
              tmp[i] = sbuf[i];
            }
            sbuf = tmp;
          }
          idx *= 2;
          N /= 2;
          j = 0;
          for (i = 0; i < N; i++) {
            buf[idx] = sbuf[j];
            buf[idx + 1] = sbuf[j + 1];
            idx += 2;
            j += 2;
          }
          return;
        }
        if (idx + N > this._length) {
          throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
        }
        idx *= 2;
        for (i = 0; i < N; i++) {
          v = value[i];
          buf[idx] = realf(v);
          buf[idx + 1] = imagf(v);
          idx += 2;
        }
        return;
      }
      throw new TypeError(format("invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.", value));
    });
    setReadOnly(Complex64Array.prototype, "slice", function slice(start, end) {
      var outlen;
      var outbuf;
      var out;
      var idx;
      var buf;
      var len;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length === 0) {
        start = 0;
        end = len;
      } else {
        if (!isInteger(start)) {
          throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", start));
        }
        if (start < 0) {
          start += len;
          if (start < 0) {
            start = 0;
          }
        }
        if (arguments.length === 1) {
          end = len;
        } else {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          } else if (end > len) {
            end = len;
          }
        }
      }
      if (start < end) {
        outlen = end - start;
      } else {
        outlen = 0;
      }
      out = new this.constructor(outlen);
      outbuf = out._buffer;
      for (i = 0; i < outlen; i++) {
        idx = 2 * (i + start);
        outbuf[2 * i] = buf[idx];
        outbuf[2 * i + 1] = buf[idx + 1];
      }
      return out;
    });
    setReadOnly(Complex64Array.prototype, "some", function some(predicate, thisArg) {
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        if (predicate.call(thisArg, getComplex64(buf, i), i, this)) {
          return true;
        }
      }
      return false;
    });
    setReadOnly(Complex64Array.prototype, "subarray", function subarray(begin, end) {
      var offset;
      var buf;
      var len;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length === 0) {
        begin = 0;
        end = len;
      } else {
        if (!isInteger(begin)) {
          throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", begin));
        }
        if (begin < 0) {
          begin += len;
          if (begin < 0) {
            begin = 0;
          }
        }
        if (arguments.length === 1) {
          end = len;
        } else {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          } else if (end > len) {
            end = len;
          }
        }
      }
      if (begin >= len) {
        len = 0;
        offset = buf.byteLength;
      } else if (begin >= end) {
        len = 0;
        offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
      } else {
        len = end - begin;
        offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
      }
      return new this.constructor(buf.buffer, offset, len < 0 ? 0 : len);
    });
    setReadOnly(Complex64Array.prototype, "toReversed", function toReversed() {
      var outbuf;
      var out;
      var len;
      var buf;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      len = this._length;
      out = new this.constructor(len);
      buf = this._buffer;
      outbuf = out._buffer;
      for (i = 0; i < len; i++) {
        j = len - i - 1;
        outbuf[2 * i] = buf[2 * j];
        outbuf[2 * i + 1] = buf[2 * j + 1];
      }
      return out;
    });
    setReadOnly(Complex64Array.prototype, "toString", function toString() {
      var out;
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      out = [];
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        out.push(getComplex64(buf, i).toString());
      }
      return out.join(",");
    });
    setReadOnly(Complex64Array.prototype, "with", function copyWith(index, value) {
      var buf;
      var out;
      var len;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isInteger(index)) {
        throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", index));
      }
      len = this._length;
      if (index < 0) {
        index += len;
      }
      if (index < 0 || index >= len) {
        throw new RangeError(format("invalid argument. Index argument is out-of-bounds. Value: `%s`.", index));
      }
      if (!isComplexLike(value)) {
        throw new TypeError(format("invalid argument. Second argument must be a complex number. Value: `%s`.", value));
      }
      out = new this.constructor(this._buffer);
      buf = out._buffer;
      buf[2 * index] = realf(value);
      buf[2 * index + 1] = imagf(value);
      return out;
    });
    module.exports = Complex64Array;
  }
});

// node_modules/@stdlib/array-complex64/lib/index.js
var require_lib98 = __commonJS({
  "node_modules/@stdlib/array-complex64/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main83();
    module.exports = main;
  }
});

// node_modules/@stdlib/complex-real/lib/main.js
var require_main84 = __commonJS({
  "node_modules/@stdlib/complex-real/lib/main.js"(exports, module) {
    "use strict";
    function real(z) {
      return z.re;
    }
    module.exports = real;
  }
});

// node_modules/@stdlib/complex-real/lib/index.js
var require_lib99 = __commonJS({
  "node_modules/@stdlib/complex-real/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main84();
    module.exports = main;
  }
});

// node_modules/@stdlib/complex-imag/lib/main.js
var require_main85 = __commonJS({
  "node_modules/@stdlib/complex-imag/lib/main.js"(exports, module) {
    "use strict";
    function imag(z) {
      return z.im;
    }
    module.exports = imag;
  }
});

// node_modules/@stdlib/complex-imag/lib/index.js
var require_lib100 = __commonJS({
  "node_modules/@stdlib/complex-imag/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main85();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-complex128/lib/from_iterator.js
var require_from_iterator2 = __commonJS({
  "node_modules/@stdlib/array-complex128/lib/from_iterator.js"(exports, module) {
    "use strict";
    var isArrayLikeObject = require_lib79();
    var isComplexLike = require_lib87();
    var format = require_lib3();
    var real = require_lib99();
    var imag = require_lib100();
    function fromIterator(it) {
      var out;
      var v;
      var z;
      out = [];
      while (true) {
        v = it.next();
        if (v.done) {
          break;
        }
        z = v.value;
        if (isArrayLikeObject(z) && z.length >= 2) {
          out.push(z[0], z[1]);
        } else if (isComplexLike(z)) {
          out.push(real(z), imag(z));
        } else {
          return new TypeError(format("invalid argument. An iterator must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", z));
        }
      }
      return out;
    }
    module.exports = fromIterator;
  }
});

// node_modules/@stdlib/array-complex128/lib/from_iterator_map.js
var require_from_iterator_map2 = __commonJS({
  "node_modules/@stdlib/array-complex128/lib/from_iterator_map.js"(exports, module) {
    "use strict";
    var isArrayLikeObject = require_lib79();
    var isComplexLike = require_lib87();
    var format = require_lib3();
    var real = require_lib99();
    var imag = require_lib100();
    function fromIteratorMap(it, clbk, thisArg) {
      var out;
      var v;
      var z;
      var i;
      out = [];
      i = -1;
      while (true) {
        v = it.next();
        if (v.done) {
          break;
        }
        i += 1;
        z = clbk.call(thisArg, v.value, i);
        if (isArrayLikeObject(z) && z.length >= 2) {
          out.push(z[0], z[1]);
        } else if (isComplexLike(z)) {
          out.push(real(z), imag(z));
        } else {
          return new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", z));
        }
      }
      return out;
    }
    module.exports = fromIteratorMap;
  }
});

// node_modules/@stdlib/array-complex128/lib/from_array.js
var require_from_array2 = __commonJS({
  "node_modules/@stdlib/array-complex128/lib/from_array.js"(exports, module) {
    "use strict";
    var isComplexLike = require_lib87();
    var real = require_lib99();
    var imag = require_lib100();
    function fromArray(buf, arr) {
      var len;
      var v;
      var i;
      var j;
      len = arr.length;
      j = 0;
      for (i = 0; i < len; i++) {
        v = arr[i];
        if (!isComplexLike(v)) {
          return null;
        }
        buf[j] = real(v);
        buf[j + 1] = imag(v);
        j += 2;
      }
      return buf;
    }
    module.exports = fromArray;
  }
});

// node_modules/@stdlib/array-complex128/lib/main.js
var require_main86 = __commonJS({
  "node_modules/@stdlib/array-complex128/lib/main.js"(exports, module) {
    "use strict";
    var isNonNegativeInteger = require_lib18().isPrimitive;
    var isArrayLikeObject = require_lib79();
    var isCollection = require_lib81();
    var isArrayBuffer = require_lib82();
    var isObject = require_lib25();
    var isArray = require_lib24();
    var isString = require_lib83();
    var isFunction = require_lib34();
    var isComplexLike = require_lib87();
    var isEven = require_lib88();
    var isInteger = require_lib16();
    var isComplex64Array = require_lib89();
    var isComplex128Array = require_lib90();
    var hasIteratorSymbolSupport = require_lib91();
    var ITERATOR_SYMBOL = require_lib92();
    var setReadOnly = require_lib5();
    var setReadOnlyAccessor = require_lib93();
    var Float64Array2 = require_lib45();
    var Complex128 = require_lib84();
    var real = require_lib99();
    var imag = require_lib100();
    var floor = require_lib15();
    var reinterpret64 = require_lib96();
    var reinterpret128 = require_lib97();
    var getter = require_lib42();
    var accessorGetter = require_lib41();
    var format = require_lib3();
    var fromIterator = require_from_iterator2();
    var fromIteratorMap = require_from_iterator_map2();
    var fromArray = require_from_array2();
    var BYTES_PER_ELEMENT = Float64Array2.BYTES_PER_ELEMENT * 2;
    var HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();
    function isComplexArray(value) {
      return value instanceof Complex128Array || typeof value === "object" && value !== null && (value.constructor.name === "Complex64Array" || value.constructor.name === "Complex128Array") && typeof value._length === "number" && // eslint-disable-line no-underscore-dangle
      // NOTE: we don't perform a more rigorous test here for a typed array for performance reasons, as robustly checking for a typed array instance could require walking the prototype tree and performing relatively expensive constructor checks...
      typeof value._buffer === "object";
    }
    function isComplexArrayConstructor(value) {
      return value === Complex128Array || // NOTE: weaker test in order to avoid a circular dependency with Complex64Array...
      value.name === "Complex64Array";
    }
    function getComplex128(buf, idx) {
      idx *= 2;
      return new Complex128(buf[idx], buf[idx + 1]);
    }
    function Complex128Array() {
      var byteOffset;
      var nargs;
      var buf;
      var len;
      nargs = arguments.length;
      if (!(this instanceof Complex128Array)) {
        if (nargs === 0) {
          return new Complex128Array();
        }
        if (nargs === 1) {
          return new Complex128Array(arguments[0]);
        }
        if (nargs === 2) {
          return new Complex128Array(arguments[0], arguments[1]);
        }
        return new Complex128Array(arguments[0], arguments[1], arguments[2]);
      }
      if (nargs === 0) {
        buf = new Float64Array2(0);
      } else if (nargs === 1) {
        if (isNonNegativeInteger(arguments[0])) {
          buf = new Float64Array2(arguments[0] * 2);
        } else if (isCollection(arguments[0])) {
          buf = arguments[0];
          len = buf.length;
          if (len && isArray(buf) && isComplexLike(buf[0])) {
            buf = fromArray(new Float64Array2(len * 2), buf);
            if (buf === null) {
              if (!isEven(len)) {
                throw new RangeError(format("invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.", len));
              }
              buf = new Float64Array2(arguments[0]);
            }
          } else {
            if (isComplex64Array(buf)) {
              buf = reinterpret64(buf, 0);
            } else if (isComplex128Array(buf)) {
              buf = reinterpret128(buf, 0);
            } else if (!isEven(len)) {
              throw new RangeError(format("invalid argument. Array-like object and typed array arguments must have a length which is a multiple of two. Length: `%u`.", len));
            }
            buf = new Float64Array2(buf);
          }
        } else if (isArrayBuffer(arguments[0])) {
          buf = arguments[0];
          if (!isInteger(buf.byteLength / BYTES_PER_ELEMENT)) {
            throw new RangeError(format("invalid argument. ArrayBuffer byte length must be a multiple of %u. Byte length: `%u`.", BYTES_PER_ELEMENT, buf.byteLength));
          }
          buf = new Float64Array2(buf);
        } else if (isObject(arguments[0])) {
          buf = arguments[0];
          if (HAS_ITERATOR_SYMBOL === false) {
            throw new TypeError(format("invalid argument. Environment lacks Symbol.iterator support. Must provide a length, ArrayBuffer, typed array, or array-like object. Value: `%s`.", buf));
          }
          if (!isFunction(buf[ITERATOR_SYMBOL])) {
            throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", buf));
          }
          buf = buf[ITERATOR_SYMBOL]();
          if (!isFunction(buf.next)) {
            throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", buf));
          }
          buf = fromIterator(buf);
          if (buf instanceof Error) {
            throw buf;
          }
          buf = new Float64Array2(buf);
        } else {
          throw new TypeError(format("invalid argument. Must provide a length, ArrayBuffer, typed array, array-like object, or an iterable. Value: `%s`.", arguments[0]));
        }
      } else {
        buf = arguments[0];
        if (!isArrayBuffer(buf)) {
          throw new TypeError(format("invalid argument. First argument must be an ArrayBuffer. Value: `%s`.", buf));
        }
        byteOffset = arguments[1];
        if (!isNonNegativeInteger(byteOffset)) {
          throw new TypeError(format("invalid argument. Byte offset must be a nonnegative integer. Value: `%s`.", byteOffset));
        }
        if (!isInteger(byteOffset / BYTES_PER_ELEMENT)) {
          throw new RangeError(format("invalid argument. Byte offset must be a multiple of %u. Value: `%u`.", BYTES_PER_ELEMENT, byteOffset));
        }
        if (nargs === 2) {
          len = buf.byteLength - byteOffset;
          if (!isInteger(len / BYTES_PER_ELEMENT)) {
            throw new RangeError(format("invalid arguments. ArrayBuffer view byte length must be a multiple of %u. View byte length: `%u`.", BYTES_PER_ELEMENT, len));
          }
          buf = new Float64Array2(buf, byteOffset);
        } else {
          len = arguments[2];
          if (!isNonNegativeInteger(len)) {
            throw new TypeError(format("invalid argument. Length must be a nonnegative integer. Value: `%s`.", len));
          }
          if (len * BYTES_PER_ELEMENT > buf.byteLength - byteOffset) {
            throw new RangeError(format("invalid arguments. ArrayBuffer has insufficient capacity. Either decrease the array length or provide a bigger buffer. Minimum capacity: `%u`.", len * BYTES_PER_ELEMENT));
          }
          buf = new Float64Array2(buf, byteOffset, len * 2);
        }
      }
      setReadOnly(this, "_buffer", buf);
      setReadOnly(this, "_length", buf.length / 2);
      return this;
    }
    setReadOnly(Complex128Array, "BYTES_PER_ELEMENT", BYTES_PER_ELEMENT);
    setReadOnly(Complex128Array, "name", "Complex128Array");
    setReadOnly(Complex128Array, "from", function from(src) {
      var thisArg;
      var nargs;
      var clbk;
      var out;
      var buf;
      var tmp;
      var get;
      var len;
      var flg;
      var v;
      var i;
      var j;
      if (!isFunction(this)) {
        throw new TypeError("invalid invocation. `this` context must be a constructor.");
      }
      if (!isComplexArrayConstructor(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      nargs = arguments.length;
      if (nargs > 1) {
        clbk = arguments[1];
        if (!isFunction(clbk)) {
          throw new TypeError(format("invalid argument. Second argument must be a function. Value: `%s`.", clbk));
        }
        if (nargs > 2) {
          thisArg = arguments[2];
        }
      }
      if (isComplexArray(src)) {
        len = src.length;
        if (clbk) {
          out = new this(len);
          buf = out._buffer;
          j = 0;
          for (i = 0; i < len; i++) {
            v = clbk.call(thisArg, src.get(i), i);
            if (isComplexLike(v)) {
              buf[j] = real(v);
              buf[j + 1] = imag(v);
            } else if (isArrayLikeObject(v) && v.length >= 2) {
              buf[j] = v[0];
              buf[j + 1] = v[1];
            } else {
              throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
            }
            j += 2;
          }
          return out;
        }
        return new this(src);
      }
      if (isCollection(src)) {
        if (clbk) {
          len = src.length;
          if (src.get && src.set) {
            get = accessorGetter("default");
          } else {
            get = getter("default");
          }
          for (i = 0; i < len; i++) {
            if (!isComplexLike(get(src, i))) {
              flg = true;
              break;
            }
          }
          if (flg) {
            if (!isEven(len)) {
              throw new RangeError(format("invalid argument. First argument must have a length which is a multiple of two. Length: `%u`.", len));
            }
            out = new this(len / 2);
            buf = out._buffer;
            for (i = 0; i < len; i++) {
              buf[i] = clbk.call(thisArg, get(src, i), i);
            }
            return out;
          }
          out = new this(len);
          buf = out._buffer;
          j = 0;
          for (i = 0; i < len; i++) {
            v = clbk.call(thisArg, get(src, i), i);
            if (isComplexLike(v)) {
              buf[j] = real(v);
              buf[j + 1] = imag(v);
            } else if (isArrayLikeObject(v) && v.length >= 2) {
              buf[j] = v[0];
              buf[j + 1] = v[1];
            } else {
              throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
            }
            j += 2;
          }
          return out;
        }
        return new this(src);
      }
      if (isObject(src) && HAS_ITERATOR_SYMBOL && isFunction(src[ITERATOR_SYMBOL])) {
        buf = src[ITERATOR_SYMBOL]();
        if (!isFunction(buf.next)) {
          throw new TypeError(format("invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.", src));
        }
        if (clbk) {
          tmp = fromIteratorMap(buf, clbk, thisArg);
        } else {
          tmp = fromIterator(buf);
        }
        if (tmp instanceof Error) {
          throw tmp;
        }
        len = tmp.length / 2;
        out = new this(len);
        buf = out._buffer;
        for (i = 0; i < len; i++) {
          buf[i] = tmp[i];
        }
        return out;
      }
      throw new TypeError(format("invalid argument. First argument must be an array-like object or an iterable. Value: `%s`.", src));
    });
    setReadOnly(Complex128Array, "of", function of() {
      var args;
      var i;
      if (!isFunction(this)) {
        throw new TypeError("invalid invocation. `this` context must be a constructor.");
      }
      if (!isComplexArrayConstructor(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      args = [];
      for (i = 0; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      return new this(args);
    });
    setReadOnly(Complex128Array.prototype, "at", function at(idx) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isInteger(idx)) {
        throw new TypeError(format("invalid argument. Must provide an integer. Value: `%s`.", idx));
      }
      if (idx < 0) {
        idx += this._length;
      }
      if (idx < 0 || idx >= this._length) {
        return;
      }
      return getComplex128(this._buffer, idx);
    });
    setReadOnlyAccessor(Complex128Array.prototype, "buffer", function get() {
      return this._buffer.buffer;
    });
    setReadOnlyAccessor(Complex128Array.prototype, "byteLength", function get() {
      return this._buffer.byteLength;
    });
    setReadOnlyAccessor(Complex128Array.prototype, "byteOffset", function get() {
      return this._buffer.byteOffset;
    });
    setReadOnly(Complex128Array.prototype, "BYTES_PER_ELEMENT", Complex128Array.BYTES_PER_ELEMENT);
    setReadOnly(Complex128Array.prototype, "copyWithin", function copyWithin(target, start) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (arguments.length === 2) {
        this._buffer.copyWithin(target * 2, start * 2);
      } else {
        this._buffer.copyWithin(target * 2, start * 2, arguments[2] * 2);
      }
      return this;
    });
    setReadOnly(Complex128Array.prototype, "entries", function entries() {
      var buffer;
      var self2;
      var iter;
      var len;
      var FLG;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      self2 = this;
      buffer = this._buffer;
      len = this._length;
      i = -1;
      j = -2;
      iter = {};
      setReadOnly(iter, "next", next);
      setReadOnly(iter, "return", end);
      if (ITERATOR_SYMBOL) {
        setReadOnly(iter, ITERATOR_SYMBOL, factory);
      }
      return iter;
      function next() {
        var z;
        i += 1;
        if (FLG || i >= len) {
          return {
            "done": true
          };
        }
        j += 2;
        z = new Complex128(buffer[j], buffer[j + 1]);
        return {
          "value": [i, z],
          "done": false
        };
      }
      function end(value) {
        FLG = true;
        if (arguments.length) {
          return {
            "value": value,
            "done": true
          };
        }
        return {
          "done": true
        };
      }
      function factory() {
        return self2.entries();
      }
    });
    setReadOnly(Complex128Array.prototype, "every", function every(predicate, thisArg) {
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        if (!predicate.call(thisArg, getComplex128(buf, i), i, this)) {
          return false;
        }
      }
      return true;
    });
    setReadOnly(Complex128Array.prototype, "fill", function fill(value, start, end) {
      var buf;
      var len;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(value)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", value));
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length > 1) {
        if (!isInteger(start)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", start));
        }
        if (start < 0) {
          start += len;
          if (start < 0) {
            start = 0;
          }
        }
        if (arguments.length > 2) {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Third argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          }
          if (end > len) {
            end = len;
          }
        } else {
          end = len;
        }
      } else {
        start = 0;
        end = len;
      }
      re = real(value);
      im = imag(value);
      for (i = start; i < end; i++) {
        idx = 2 * i;
        buf[idx] = re;
        buf[idx + 1] = im;
      }
      return this;
    });
    setReadOnly(Complex128Array.prototype, "filter", function filter(predicate, thisArg) {
      var buf;
      var out;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      out = [];
      for (i = 0; i < this._length; i++) {
        z = getComplex128(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          out.push(z);
        }
      }
      return new this.constructor(out);
    });
    setReadOnly(Complex128Array.prototype, "find", function find(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex128(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return z;
        }
      }
    });
    setReadOnly(Complex128Array.prototype, "findIndex", function findIndex(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex128(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex128Array.prototype, "findLast", function findLast(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = this._length - 1; i >= 0; i--) {
        z = getComplex128(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return z;
        }
      }
    });
    setReadOnly(Complex128Array.prototype, "findLastIndex", function findLastIndex(predicate, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = this._length - 1; i >= 0; i--) {
        z = getComplex128(buf, i);
        if (predicate.call(thisArg, z, i, this)) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex128Array.prototype, "forEach", function forEach(fcn, thisArg) {
      var buf;
      var i;
      var z;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(fcn)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", fcn));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        z = getComplex128(buf, i);
        fcn.call(thisArg, z, i, this);
      }
    });
    setReadOnly(Complex128Array.prototype, "get", function get(idx) {
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isNonNegativeInteger(idx)) {
        throw new TypeError(format("invalid argument. Must provide a nonnegative integer. Value: `%s`.", idx));
      }
      if (idx >= this._length) {
        return;
      }
      return getComplex128(this._buffer, idx);
    });
    setReadOnlyAccessor(Complex128Array.prototype, "length", function get() {
      return this._length;
    });
    setReadOnly(Complex128Array.prototype, "includes", function includes(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex < 0) {
          fromIndex += this._length;
          if (fromIndex < 0) {
            fromIndex = 0;
          }
        }
      } else {
        fromIndex = 0;
      }
      re = real(searchElement);
      im = imag(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i < this._length; i++) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return true;
        }
      }
      return false;
    });
    setReadOnly(Complex128Array.prototype, "indexOf", function indexOf(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex < 0) {
          fromIndex += this._length;
          if (fromIndex < 0) {
            fromIndex = 0;
          }
        }
      } else {
        fromIndex = 0;
      }
      re = real(searchElement);
      im = imag(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i < this._length; i++) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex128Array.prototype, "join", function join(separator) {
      var out;
      var buf;
      var sep;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (arguments.length === 0) {
        sep = ",";
      } else if (isString(separator)) {
        sep = separator;
      } else {
        throw new TypeError(format("invalid argument. First argument must be a string. Value: `%s`.", separator));
      }
      out = [];
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        out.push(getComplex128(buf, i).toString());
      }
      return out.join(sep);
    });
    setReadOnly(Complex128Array.prototype, "lastIndexOf", function lastIndexOf(searchElement, fromIndex) {
      var buf;
      var idx;
      var re;
      var im;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isComplexLike(searchElement)) {
        throw new TypeError(format("invalid argument. First argument must be a complex number. Value: `%s`.", searchElement));
      }
      if (arguments.length > 1) {
        if (!isInteger(fromIndex)) {
          throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", fromIndex));
        }
        if (fromIndex >= this._length) {
          fromIndex = this._length - 1;
        } else if (fromIndex < 0) {
          fromIndex += this._length;
        }
      } else {
        fromIndex = this._length - 1;
      }
      re = real(searchElement);
      im = imag(searchElement);
      buf = this._buffer;
      for (i = fromIndex; i >= 0; i--) {
        idx = 2 * i;
        if (re === buf[idx] && im === buf[idx + 1]) {
          return i;
        }
      }
      return -1;
    });
    setReadOnly(Complex128Array.prototype, "map", function map(fcn, thisArg) {
      var outbuf;
      var buf;
      var out;
      var i;
      var v;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(fcn)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", fcn));
      }
      buf = this._buffer;
      out = new this.constructor(this._length);
      outbuf = out._buffer;
      for (i = 0; i < this._length; i++) {
        v = fcn.call(thisArg, getComplex128(buf, i), i, this);
        if (isComplexLike(v)) {
          outbuf[2 * i] = real(v);
          outbuf[2 * i + 1] = imag(v);
        } else if (isArrayLikeObject(v) && v.length === 2) {
          outbuf[2 * i] = v[0];
          outbuf[2 * i + 1] = v[1];
        } else {
          throw new TypeError(format("invalid argument. Callback must return either a two-element array containing real and imaginary components or a complex number. Value: `%s`.", v));
        }
      }
      return out;
    });
    setReadOnly(Complex128Array.prototype, "reduce", function reduce(reducer, initialValue) {
      var buf;
      var acc;
      var len;
      var v;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(reducer)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", reducer));
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length > 1) {
        acc = initialValue;
        i = 0;
      } else {
        if (len === 0) {
          throw new Error("invalid operation. If not provided an initial value, an array must contain at least one element.");
        }
        acc = getComplex128(buf, 0);
        i = 1;
      }
      for (; i < len; i++) {
        v = getComplex128(buf, i);
        acc = reducer(acc, v, i, this);
      }
      return acc;
    });
    setReadOnly(Complex128Array.prototype, "reverse", function reverse() {
      var buf;
      var tmp;
      var len;
      var N;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      len = this._length;
      buf = this._buffer;
      N = floor(len / 2);
      for (i = 0; i < N; i++) {
        j = len - i - 1;
        tmp = buf[2 * i];
        buf[2 * i] = buf[2 * j];
        buf[2 * j] = tmp;
        tmp = buf[2 * i + 1];
        buf[2 * i + 1] = buf[2 * j + 1];
        buf[2 * j + 1] = tmp;
      }
      return this;
    });
    setReadOnly(Complex128Array.prototype, "set", function set(value) {
      var sbuf;
      var idx;
      var buf;
      var tmp;
      var flg;
      var N;
      var v;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      if (arguments.length > 1) {
        idx = arguments[1];
        if (!isNonNegativeInteger(idx)) {
          throw new TypeError(format("invalid argument. Index argument must be a nonnegative integer. Value: `%s`.", idx));
        }
      } else {
        idx = 0;
      }
      if (isComplexLike(value)) {
        if (idx >= this._length) {
          throw new RangeError(format("invalid argument. Index argument is out-of-bounds. Value: `%u`.", idx));
        }
        idx *= 2;
        buf[idx] = real(value);
        buf[idx + 1] = imag(value);
        return;
      }
      if (isComplexArray(value)) {
        N = value._length;
        if (idx + N > this._length) {
          throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
        }
        sbuf = value._buffer;
        j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
        if (sbuf.buffer === buf.buffer && (sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j)) {
          tmp = new Float64Array2(sbuf.length);
          for (i = 0; i < sbuf.length; i++) {
            tmp[i] = sbuf[i];
          }
          sbuf = tmp;
        }
        idx *= 2;
        j = 0;
        for (i = 0; i < N; i++) {
          buf[idx] = sbuf[j];
          buf[idx + 1] = sbuf[j + 1];
          idx += 2;
          j += 2;
        }
        return;
      }
      if (isCollection(value)) {
        N = value.length;
        for (i = 0; i < N; i++) {
          if (!isComplexLike(value[i])) {
            flg = true;
            break;
          }
        }
        if (flg) {
          if (!isEven(N)) {
            throw new RangeError(format("invalid argument. Array-like object arguments must have a length which is a multiple of two. Length: `%u`.", N));
          }
          if (idx + N / 2 > this._length) {
            throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
          }
          sbuf = value;
          j = buf.byteOffset + idx * BYTES_PER_ELEMENT;
          if (sbuf.buffer === buf.buffer && (sbuf.byteOffset < j && sbuf.byteOffset + sbuf.byteLength > j)) {
            tmp = new Float64Array2(N);
            for (i = 0; i < N; i++) {
              tmp[i] = sbuf[i];
            }
            sbuf = tmp;
          }
          idx *= 2;
          N /= 2;
          j = 0;
          for (i = 0; i < N; i++) {
            buf[idx] = sbuf[j];
            buf[idx + 1] = sbuf[j + 1];
            idx += 2;
            j += 2;
          }
          return;
        }
        if (idx + N > this._length) {
          throw new RangeError("invalid arguments. Target array lacks sufficient storage to accommodate source values.");
        }
        idx *= 2;
        for (i = 0; i < N; i++) {
          v = value[i];
          buf[idx] = real(v);
          buf[idx + 1] = imag(v);
          idx += 2;
        }
        return;
      }
      throw new TypeError(format("invalid argument. First argument must be either a complex number, an array-like object, or a complex number array. Value: `%s`.", value));
    });
    setReadOnly(Complex128Array.prototype, "slice", function slice(start, end) {
      var outlen;
      var outbuf;
      var out;
      var idx;
      var buf;
      var len;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length === 0) {
        start = 0;
        end = len;
      } else {
        if (!isInteger(start)) {
          throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", start));
        }
        if (start < 0) {
          start += len;
          if (start < 0) {
            start = 0;
          }
        }
        if (arguments.length === 1) {
          end = len;
        } else {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          } else if (end > len) {
            end = len;
          }
        }
      }
      if (start < end) {
        outlen = end - start;
      } else {
        outlen = 0;
      }
      out = new this.constructor(outlen);
      outbuf = out._buffer;
      for (i = 0; i < outlen; i++) {
        idx = 2 * (i + start);
        outbuf[2 * i] = buf[idx];
        outbuf[2 * i + 1] = buf[idx + 1];
      }
      return out;
    });
    setReadOnly(Complex128Array.prototype, "some", function some(predicate, thisArg) {
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isFunction(predicate)) {
        throw new TypeError(format("invalid argument. First argument must be a function. Value: `%s`.", predicate));
      }
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        if (predicate.call(thisArg, getComplex128(buf, i), i, this)) {
          return true;
        }
      }
      return false;
    });
    setReadOnly(Complex128Array.prototype, "subarray", function subarray(begin, end) {
      var offset;
      var buf;
      var len;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      buf = this._buffer;
      len = this._length;
      if (arguments.length === 0) {
        begin = 0;
        end = len;
      } else {
        if (!isInteger(begin)) {
          throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", begin));
        }
        if (begin < 0) {
          begin += len;
          if (begin < 0) {
            begin = 0;
          }
        }
        if (arguments.length === 1) {
          end = len;
        } else {
          if (!isInteger(end)) {
            throw new TypeError(format("invalid argument. Second argument must be an integer. Value: `%s`.", end));
          }
          if (end < 0) {
            end += len;
            if (end < 0) {
              end = 0;
            }
          } else if (end > len) {
            end = len;
          }
        }
      }
      if (begin >= len) {
        len = 0;
        offset = buf.byteLength;
      } else if (begin >= end) {
        len = 0;
        offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
      } else {
        len = end - begin;
        offset = buf.byteOffset + begin * BYTES_PER_ELEMENT;
      }
      return new this.constructor(buf.buffer, offset, len < 0 ? 0 : len);
    });
    setReadOnly(Complex128Array.prototype, "toReversed", function toReversed() {
      var outbuf;
      var out;
      var len;
      var buf;
      var i;
      var j;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      len = this._length;
      out = new this.constructor(len);
      buf = this._buffer;
      outbuf = out._buffer;
      for (i = 0; i < len; i++) {
        j = len - i - 1;
        outbuf[2 * i] = buf[2 * j];
        outbuf[2 * i + 1] = buf[2 * j + 1];
      }
      return out;
    });
    setReadOnly(Complex128Array.prototype, "toString", function toString() {
      var out;
      var buf;
      var i;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      out = [];
      buf = this._buffer;
      for (i = 0; i < this._length; i++) {
        out.push(getComplex128(buf, i).toString());
      }
      return out.join(",");
    });
    setReadOnly(Complex128Array.prototype, "with", function copyWith(index, value) {
      var buf;
      var out;
      var len;
      if (!isComplexArray(this)) {
        throw new TypeError("invalid invocation. `this` is not a complex number array.");
      }
      if (!isInteger(index)) {
        throw new TypeError(format("invalid argument. First argument must be an integer. Value: `%s`.", index));
      }
      len = this._length;
      if (index < 0) {
        index += len;
      }
      if (index < 0 || index >= len) {
        throw new RangeError(format("invalid argument. Index argument is out-of-bounds. Value: `%s`.", index));
      }
      if (!isComplexLike(value)) {
        throw new TypeError(format("invalid argument. Second argument must be a complex number. Value: `%s`.", value));
      }
      out = new this.constructor(this._buffer);
      buf = out._buffer;
      buf[2 * index] = real(value);
      buf[2 * index + 1] = imag(value);
      return out;
    });
    module.exports = Complex128Array;
  }
});

// node_modules/@stdlib/array-complex128/lib/index.js
var require_lib101 = __commonJS({
  "node_modules/@stdlib/array-complex128/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main86();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-dtype/lib/ctors.js
var require_ctors = __commonJS({
  "node_modules/@stdlib/array-dtype/lib/ctors.js"(exports, module) {
    "use strict";
    var Float64Array2 = require_lib45();
    var Float32Array2 = require_lib48();
    var Uint32Array2 = require_lib52();
    var Int32Array2 = require_lib57();
    var Uint16Array2 = require_lib61();
    var Int16Array2 = require_lib66();
    var Uint8Array2 = require_lib70();
    var Uint8ClampedArray2 = require_lib73();
    var Int8Array2 = require_lib78();
    var Complex64Array = require_lib98();
    var Complex128Array = require_lib101();
    var CTORS = [
      Float64Array2,
      Float32Array2,
      Int32Array2,
      Uint32Array2,
      Int16Array2,
      Uint16Array2,
      Int8Array2,
      Uint8Array2,
      Uint8ClampedArray2,
      Complex64Array,
      Complex128Array
    ];
    module.exports = CTORS;
  }
});

// node_modules/@stdlib/array-dtype/lib/dtypes.js
var require_dtypes = __commonJS({
  "node_modules/@stdlib/array-dtype/lib/dtypes.js"(exports, module) {
    "use strict";
    var DTYPES = [
      "float64",
      "float32",
      "int32",
      "uint32",
      "int16",
      "uint16",
      "int8",
      "uint8",
      "uint8c",
      "complex64",
      "complex128"
    ];
    module.exports = DTYPES;
  }
});

// node_modules/@stdlib/array-dtype/lib/main.js
var require_main87 = __commonJS({
  "node_modules/@stdlib/array-dtype/lib/main.js"(exports, module) {
    "use strict";
    var isBuffer = require_lib31();
    var isArray = require_lib24();
    var constructorName = require_lib32();
    var ctor2dtype = require_ctor2dtype();
    var CTORS = require_ctors();
    var DTYPES = require_dtypes();
    var NTYPES = DTYPES.length;
    function dtype(value) {
      var i;
      if (isArray(value)) {
        return "generic";
      }
      if (isBuffer(value)) {
        return null;
      }
      for (i = 0; i < NTYPES; i++) {
        if (value instanceof CTORS[i]) {
          return DTYPES[i];
        }
      }
      return ctor2dtype[constructorName(value)] || null;
    }
    module.exports = dtype;
  }
});

// node_modules/@stdlib/array-dtype/lib/index.js
var require_lib102 = __commonJS({
  "node_modules/@stdlib/array-dtype/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main87();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-assert-contains/lib/main.js
var require_main88 = __commonJS({
  "node_modules/@stdlib/array-base-assert-contains/lib/main.js"(exports, module) {
    "use strict";
    var isAccessorArray = require_lib40();
    var accessorGetter = require_lib41();
    var getter = require_lib42();
    var dtype = require_lib102();
    function contains(x, value) {
      var len;
      var get;
      var dt;
      var i;
      dt = dtype(x);
      if (isAccessorArray(x)) {
        get = accessorGetter(dt);
      } else {
        get = getter(dt);
      }
      len = x.length;
      for (i = 0; i < len; i++) {
        if (get(x, i) === value) {
          return true;
        }
      }
      return false;
    }
    module.exports = contains;
  }
});

// node_modules/@stdlib/array-base-assert-contains/lib/factory.js
var require_factory = __commonJS({
  "node_modules/@stdlib/array-base-assert-contains/lib/factory.js"(exports, module) {
    "use strict";
    var isCollection = require_lib81();
    var isAccessorArray = require_lib40();
    var accessorGetter = require_lib41();
    var dtype = require_lib102();
    var format = require_lib3();
    function factory(x) {
      var get;
      var len;
      var dt;
      if (!isCollection(x)) {
        throw new TypeError(format("invalid argument. Must provide an array-like object. Value: `%s`.", x));
      }
      dt = dtype(x);
      if (isAccessorArray(x)) {
        get = accessorGetter(dt);
      }
      len = x.length;
      return get === void 0 ? contains : accessors;
      function contains(value) {
        var i;
        for (i = 0; i < len; i++) {
          if (x[i] === value) {
            return true;
          }
        }
        return false;
      }
      function accessors(value) {
        var i;
        for (i = 0; i < len; i++) {
          if (get(x, i) === value) {
            return true;
          }
        }
        return false;
      }
    }
    module.exports = factory;
  }
});

// node_modules/@stdlib/array-base-assert-contains/lib/index.js
var require_lib103 = __commonJS({
  "node_modules/@stdlib/array-base-assert-contains/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var main = require_main88();
    var factory = require_factory();
    setReadOnly(main, "factory", factory);
    module.exports = main;
  }
});

// node_modules/@stdlib/ndarray-index-modes/lib/modes.json
var require_modes = __commonJS({
  "node_modules/@stdlib/ndarray-index-modes/lib/modes.json"(exports, module) {
    module.exports = [
      "throw",
      "normalize",
      "clamp",
      "wrap"
    ];
  }
});

// node_modules/@stdlib/ndarray-index-modes/lib/main.js
var require_main89 = __commonJS({
  "node_modules/@stdlib/ndarray-index-modes/lib/main.js"(exports, module) {
    "use strict";
    var MODES = require_modes();
    function modes() {
      return MODES.slice();
    }
    module.exports = modes;
  }
});

// node_modules/@stdlib/ndarray-index-modes/lib/enum.js
var require_enum2 = __commonJS({
  "node_modules/@stdlib/ndarray-index-modes/lib/enum.js"(exports, module) {
    "use strict";
    function enumerated() {
      return {
        "throw": 1,
        "clamp": 2,
        "wrap": 3,
        "normalize": 4
      };
    }
    module.exports = enumerated;
  }
});

// node_modules/@stdlib/ndarray-index-modes/lib/index.js
var require_lib104 = __commonJS({
  "node_modules/@stdlib/ndarray-index-modes/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib5();
    var modes = require_main89();
    var enumeration = require_enum2();
    setReadOnly(modes, "enum", enumeration);
    module.exports = modes;
  }
});

// node_modules/@stdlib/ndarray-base-assert-is-index-mode/lib/main.js
var require_main90 = __commonJS({
  "node_modules/@stdlib/ndarray-base-assert-is-index-mode/lib/main.js"(exports, module) {
    "use strict";
    var contains = require_lib103().factory;
    var modes = require_lib104();
    var isIndexMode = contains(modes());
    module.exports = isIndexMode;
  }
});

// node_modules/@stdlib/ndarray-base-assert-is-index-mode/lib/index.js
var require_lib105 = __commonJS({
  "node_modules/@stdlib/ndarray-base-assert-is-index-mode/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main90();
    module.exports = main;
  }
});

export {
  require_lib3 as require_lib,
  require_lib5 as require_lib2,
  require_lib8 as require_lib3,
  require_lib15 as require_lib4,
  require_lib17 as require_lib5,
  require_lib22 as require_lib6,
  require_lib23 as require_lib7,
  require_lib24 as require_lib8,
  require_lib37 as require_lib9,
  require_lib39 as require_lib10,
  require_lib105 as require_lib11
};
/*! Bundled license information:

@stdlib/utils-define-property/lib/define_property.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-property/lib/has_define_property_support.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-property/lib/builtin.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/is_number.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/zero_pad.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/format_integer.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/is_string.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/format_double.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/space_pad.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-interpolate/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-tokenize/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-base-format-tokenize/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-format/lib/is_string.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-format/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/string-format/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-property/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-symbol-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-symbol-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-tostringtag-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-tostringtag-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-native-class/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-native-class/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-own-property/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-own-property/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol-ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol-ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-native-class/lib/tostringtag.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-native-class/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-native-class/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/number-ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/number-ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/try2serialize.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-number/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-float64-pinf/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-float64-ninf/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-floor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-floor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-assert-is-integer/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-assert-is-integer/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-integer/lib/integer.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-integer/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-integer/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-integer/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-integer/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-nonnegative-integer/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-nonnegative-integer/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-nonnegative-integer/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-nonnegative-integer/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-array-max-array-length/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array-like/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array-like/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-tools-array-like-function/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-tools-array-like-function/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-nonnegative-integer-array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-shape2strides/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-shape2strides/lib/assign.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-shape2strides/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-object/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-object/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/fixtures/re.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/boolean-ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/boolean-ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/try2serialize.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-boolean/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-global/lib/codegen.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-global/lib/self.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-global/lib/window.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-global/lib/global_this.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-global/lib/browser.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/fixtures/nodelist.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/fixtures/typedarray.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/check.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/regexp-function-name/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/regexp-function-name/lib/regexp.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/regexp-function-name/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-tools-array-function/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-tools-array-function/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-object-like/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-object-like/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-buffer/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-buffer/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-constructor-name/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-constructor-name/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-type-of/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-function/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-function/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/object-ctor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/object-ctor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/native.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/proto.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/detect.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-get-prototype-of/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-plain-object/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-plain-object/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-orders/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-orders/lib/enum.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-orders/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-assert-is-order/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-assert-is-order/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-accessor-array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-accessor-array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-accessor-getter/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-accessor-getter/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-getter/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-getter/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2022 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-dtype/lib/ctor2dtype.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-float64array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-float64array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float64array-support/lib/float64array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float64array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float64array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float64/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float64/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float64/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-float32array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-float32array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float32array-support/lib/float32array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float32array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-float32array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float32/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float32/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-float32/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint32array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint32array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-uint32-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint32array-support/lib/uint32array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint32array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint32array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint32/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint32/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint32/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int32array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int32array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int32-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int32-min/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int32array-support/lib/int32array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int32array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int32array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int32/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int32/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int32/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint16array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint16array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-uint16-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint16array-support/lib/uint16array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint16array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint16array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint16/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint16/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint16/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int16array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int16array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int16-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int16-min/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int16array-support/lib/int16array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int16array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int16array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int16/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int16/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int16/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint8array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint8array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-uint8-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8array-support/lib/uint8array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint8clampedarray/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-uint8clampedarray/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8clampedarray-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-uint8clampedarray-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8c/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8c/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-uint8c/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int8array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-int8array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int8-max/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-int8-min/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int8array-support/lib/int8array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int8array-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-int8array-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int8/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int8/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-int8/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array-like-object/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-array-like-object/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/constants-array-max-typed-array-length/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-collection/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-collection/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-arraybuffer/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-arraybuffer/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/primitive.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/valueof.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/try2valueof.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/object.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-string/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float64/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float64/lib/tojson.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float64/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float64/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/number-float64-base-to-float32/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/number-float64-base-to-float32/lib/polyfill.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/number-float64-base-to-float32/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float32/lib/tostring.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float32/lib/tojson.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float32/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-float32/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-complex-like/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-is-complex-like/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-assert-is-even/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-assert-is-even/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-complex64array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2024 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-complex64array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2024 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-complex128array/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2024 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-is-complex128array/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2024 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-iterator-symbol-support/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/assert-has-iterator-symbol-support/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol-iterator/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/symbol-iterator/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/utils-define-nonenumerable-read-only-accessor/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-realf/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-realf/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-imagf/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-imagf/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/strided-base-reinterpret-complex64/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/strided-base-reinterpret-complex64/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/strided-base-reinterpret-complex128/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/strided-base-reinterpret-complex128/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex64/lib/from_iterator.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex64/lib/from_iterator_map.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex64/lib/from_array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex64/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex64/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-real/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-real/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-imag/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/complex-imag/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex128/lib/from_iterator.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex128/lib/from_iterator_map.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex128/lib/from_array.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex128/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-complex128/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-dtype/lib/ctors.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-dtype/lib/dtypes.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-dtype/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-dtype/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-contains/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2023 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-contains/lib/factory.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2023 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-assert-contains/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2023 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-index-modes/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-index-modes/lib/enum.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-index-modes/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-assert-is-index-mode/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-assert-is-index-mode/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
*/
//# sourceMappingURL=chunk-ITPF5RFW.js.map
