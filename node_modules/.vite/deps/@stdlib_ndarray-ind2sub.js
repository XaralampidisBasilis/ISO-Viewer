import {
  require_lib,
  require_lib10 as require_lib9,
  require_lib11 as require_lib10,
  require_lib2,
  require_lib3,
  require_lib4,
  require_lib5,
  require_lib6,
  require_lib7,
  require_lib9 as require_lib8
} from "./chunk-ITPF5RFW.js";
import {
  __commonJS
} from "./chunk-XNHBATJA.js";

// node_modules/@stdlib/array-base-filled/lib/main.js
var require_main = __commonJS({
  "node_modules/@stdlib/array-base-filled/lib/main.js"(exports, module) {
    "use strict";
    function filled(value, len) {
      var arr;
      var i;
      arr = [];
      for (i = 0; i < len; i++) {
        arr.push(value);
      }
      return arr;
    }
    module.exports = filled;
  }
});

// node_modules/@stdlib/array-base-filled/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@stdlib/array-base-filled/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main();
    module.exports = main;
  }
});

// node_modules/@stdlib/array-base-zeros/lib/main.js
var require_main2 = __commonJS({
  "node_modules/@stdlib/array-base-zeros/lib/main.js"(exports, module) {
    "use strict";
    var filled = require_lib11();
    function zeros(len) {
      return filled(0, len);
    }
    module.exports = zeros;
  }
});

// node_modules/@stdlib/array-base-zeros/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@stdlib/array-base-zeros/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main2();
    module.exports = main;
  }
});

// node_modules/@stdlib/math-base-special-ceil/lib/main.js
var require_main3 = __commonJS({
  "node_modules/@stdlib/math-base-special-ceil/lib/main.js"(exports, module) {
    "use strict";
    var ceil = Math.ceil;
    module.exports = ceil;
  }
});

// node_modules/@stdlib/math-base-special-ceil/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@stdlib/math-base-special-ceil/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main3();
    module.exports = main;
  }
});

// node_modules/@stdlib/math-base-special-trunc/lib/main.js
var require_main4 = __commonJS({
  "node_modules/@stdlib/math-base-special-trunc/lib/main.js"(exports, module) {
    "use strict";
    var floor = require_lib4();
    var ceil = require_lib13();
    function trunc(x) {
      if (x < 0) {
        return ceil(x);
      }
      return floor(x);
    }
    module.exports = trunc;
  }
});

// node_modules/@stdlib/math-base-special-trunc/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@stdlib/math-base-special-trunc/lib/index.js"(exports, module) {
    "use strict";
    var main = require_main4();
    module.exports = main;
  }
});

// node_modules/@stdlib/ndarray-base-ind2sub/lib/assign.js
var require_assign = __commonJS({
  "node_modules/@stdlib/ndarray-base-ind2sub/lib/assign.js"(exports, module) {
    "use strict";
    var format = require_lib();
    var trunc = require_lib14();
    function ind2sub(shape, strides, offset, order, idx, mode, out) {
      var ndims;
      var len;
      var k;
      var s;
      var i;
      ndims = shape.length;
      len = 1;
      for (i = 0; i < ndims; i++) {
        len *= shape[i];
      }
      if (mode === "clamp") {
        if (idx < 0) {
          idx = 0;
        } else if (idx >= len) {
          idx = len - 1;
        }
      } else if (mode === "wrap") {
        if (idx < 0) {
          idx += len;
          if (idx < 0) {
            idx %= len;
            if (idx !== 0) {
              idx += len;
            }
          }
        } else if (idx >= len) {
          idx -= len;
          if (idx >= len) {
            idx %= len;
          }
        }
      } else {
        if (mode === "normalize" && idx < 0) {
          idx += len;
        }
        if (idx < 0 || idx >= len) {
          throw new RangeError(format("invalid argument. Linear index must not exceed array dimensions. Number of array elements: `%u`. Value: `%d`.", len, idx));
        }
      }
      if (offset === 0) {
        if (order === "column-major") {
          for (i = 0; i < ndims; i++) {
            s = idx % shape[i];
            idx -= s;
            idx /= shape[i];
            out[i] = s;
          }
          return out;
        }
        for (i = ndims - 1; i >= 0; i--) {
          s = idx % shape[i];
          idx -= s;
          idx /= shape[i];
          out[i] = s;
        }
        return out;
      }
      if (order === "column-major") {
        for (i = ndims - 1; i >= 0; i--) {
          s = strides[i];
          if (s < 0) {
            k = trunc(idx / s);
            idx -= k * s;
            out[i] = shape[i] - 1 + k;
          } else {
            k = trunc(idx / s);
            idx -= k * s;
            out[i] = k;
          }
        }
        return out;
      }
      for (i = 0; i < ndims; i++) {
        s = strides[i];
        if (s < 0) {
          k = trunc(idx / s);
          idx -= k * s;
          out[i] = shape[i] - 1 + k;
        } else {
          k = trunc(idx / s);
          idx -= k * s;
          out[i] = k;
        }
      }
      return out;
    }
    module.exports = ind2sub;
  }
});

// node_modules/@stdlib/ndarray-base-ind2sub/lib/main.js
var require_main5 = __commonJS({
  "node_modules/@stdlib/ndarray-base-ind2sub/lib/main.js"(exports, module) {
    "use strict";
    var zeros = require_lib12();
    var getSubscripts = require_assign();
    function ind2sub(shape, strides, offset, order, idx, mode) {
      return getSubscripts(shape, strides, offset, order, idx, mode, zeros(shape.length));
    }
    module.exports = ind2sub;
  }
});

// node_modules/@stdlib/ndarray-base-ind2sub/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@stdlib/ndarray-base-ind2sub/lib/index.js"(exports, module) {
    "use strict";
    var setReadOnly = require_lib2();
    var main = require_main5();
    var assign = require_assign();
    setReadOnly(main, "assign", assign);
    module.exports = main;
  }
});

// node_modules/@stdlib/ndarray-ind2sub/lib/defaults.json
var require_defaults = __commonJS({
  "node_modules/@stdlib/ndarray-ind2sub/lib/defaults.json"(exports, module) {
    module.exports = {
      mode: "throw",
      order: "row-major"
    };
  }
});

// node_modules/@stdlib/ndarray-ind2sub/lib/validate.js
var require_validate = __commonJS({
  "node_modules/@stdlib/ndarray-ind2sub/lib/validate.js"(exports, module) {
    "use strict";
    var isObject = require_lib8();
    var hasOwnProp = require_lib3();
    var isOrder = require_lib9();
    var isIndexMode = require_lib10();
    var format = require_lib();
    function validate(opts, options) {
      if (!isObject(options)) {
        return new TypeError(format("invalid argument. Options argument must be an object. Value: `%s`.", options));
      }
      if (hasOwnProp(options, "mode")) {
        opts.mode = options.mode;
        if (!isIndexMode(opts.mode)) {
          return new TypeError(format("invalid option. `%s` option must be a supported/recognized mode. Option: `%s`.", "mode", opts.mode));
        }
      }
      if (hasOwnProp(options, "order")) {
        opts.order = options.order;
        if (!isOrder(opts.order)) {
          return new TypeError(format("invalid option. `%s` option must be a supported/recognized order. Option: `%s`.", "order", opts.order));
        }
      }
      return null;
    }
    module.exports = validate;
  }
});

// node_modules/@stdlib/ndarray-ind2sub/lib/main.js
var require_main6 = __commonJS({
  "node_modules/@stdlib/ndarray-ind2sub/lib/main.js"(exports, module) {
    "use strict";
    var isNonNegativeIntegerArray = require_lib6().primitives;
    var isInteger = require_lib5().isPrimitive;
    var shape2strides = require_lib7();
    var getSubscripts = require_lib15();
    var format = require_lib();
    var defaults = require_defaults();
    var validate = require_validate();
    function ind2sub(shape, idx, options) {
      var opts;
      var err;
      opts = {};
      opts.mode = defaults.mode;
      opts.order = defaults.order;
      if (arguments.length > 2) {
        err = validate(opts, options);
        if (err) {
          throw err;
        }
      }
      if (!isNonNegativeIntegerArray(shape)) {
        throw new TypeError(format("invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.", shape));
      }
      if (!isInteger(idx)) {
        throw new TypeError(format("invalid argument. Linear index must be integer valued. Value: `%s`.", idx));
      }
      return getSubscripts(shape, shape2strides(shape, opts.order), 0, opts.order, idx, opts.mode);
    }
    module.exports = ind2sub;
  }
});

// node_modules/@stdlib/ndarray-ind2sub/lib/assign.js
var require_assign2 = __commonJS({
  "node_modules/@stdlib/ndarray-ind2sub/lib/assign.js"(exports, module) {
    "use strict";
    var isNonNegativeIntegerArray = require_lib6().primitives;
    var isInteger = require_lib5().isPrimitive;
    var shape2strides = require_lib7();
    var getSubscripts = require_lib15().assign;
    var format = require_lib();
    var defaults = require_defaults();
    var validate = require_validate();
    function ind2sub(shape, idx, options, out) {
      var opts;
      var dest;
      var err;
      opts = {};
      opts.mode = defaults.mode;
      opts.order = defaults.order;
      if (arguments.length === 4) {
        err = validate(opts, arguments[2]);
        if (err) {
          throw err;
        }
        if (typeof out !== "object" || out === null) {
          throw new TypeError(format("invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.", out));
        }
        dest = out;
      } else {
        dest = options;
        if (typeof dest !== "object" || dest === null) {
          throw new TypeError(format("invalid argument. Output argument must be either an array, typed array, or object. Value: `%s`.", dest));
        }
      }
      if (!isNonNegativeIntegerArray(shape)) {
        throw new TypeError(format("invalid argument. Shape argument must be an array-like object containing nonnegative integers. Value: `%s`.", shape));
      }
      if (!isInteger(idx)) {
        throw new TypeError(format("invalid argument. Linear index must be integer valued. Value: `%s`.", idx));
      }
      return getSubscripts(shape, shape2strides(shape, opts.order), 0, opts.order, idx, opts.mode, dest);
    }
    module.exports = ind2sub;
  }
});

// node_modules/@stdlib/ndarray-ind2sub/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@stdlib/ndarray-ind2sub/lib/index.js"(exports, module) {
    var setReadOnly = require_lib2();
    var main = require_main6();
    var assign = require_assign2();
    setReadOnly(main, "assign", assign);
    module.exports = main;
  }
});
export default require_lib16();
/*! Bundled license information:

@stdlib/array-base-filled/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-filled/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-zeros/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/array-base-zeros/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2021 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-ceil/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-ceil/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-trunc/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/math-base-special-trunc/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-ind2sub/lib/assign.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-ind2sub/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-base-ind2sub/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-ind2sub/lib/validate.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-ind2sub/lib/main.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-ind2sub/lib/assign.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)

@stdlib/ndarray-ind2sub/lib/index.js:
  (**
  * @license Apache-2.0
  *
  * Copyright (c) 2018 The Stdlib Authors.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *    http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
*/
//# sourceMappingURL=@stdlib_ndarray-ind2sub.js.map
