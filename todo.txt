
Implement dom element for AR based on this: https://www.youtube.com/watch?v=uJ2ikVUXKBw&ab_channel=Rafadante

Add typescript

Να ψαξω βιβλιογραφία για το πως μπορεί να χρησιμοποιηθεί το εργαλιο για εφαρμογες σε ML και heart hailure
Και να ολοκληρώσω τα ερωτηματολόγια

small errors are noticed when using raymarch_skipping. Also need to make sure to traverse a block boundary




Improve variable naming

struct parameters_trace 
{
    int   step_index;
    int   skip_index;

    float step_scaling;  
    float step_distance;
    float skip_distance;
    float rand_distance;            dither_step; dither_distance; jitter_dist; noise_distance

    float distance;
    vec3  position;                 space_position; model_position;

    float sample;                   value;         value;    sample_value;   value; sampled_value; sampled_intensity; intensity_value; voxel_value; voxel_intensity;
    float sample_error;
    vec4  sample_color;             value_color;   color;    sample_color;  color_mapped;
    vec4  sample_shading;           value_shading; shading;  sample_shading; color_shading;

    vec3  gradient;
    float gradient_magnitude;       gradient_size;  gradient_norm;  
    vec3  gradient_direction;       normal; surface_normal; 

    vec3  coords;          voxel_coords;             coordinates; volume_texture_coords;
    vec3  coords_texture;  voxel_texture_coords;     position_texture; volume_texture_position; voxel_tex_coords;

    float step_derivative;  directional_derivative; derivative1; first_derivative; step_gradient; directional_gradient; step_derivative; step_velocity;
    float step_curvature;   directional_derivative2; derivative2; second_derivative; step_curvature; step_acceleration;
    float step_torsion;     step_jerk; directional_derivative3; derivative3; third_derivative; step_gradient; step_torsion; step_jerk; step_flexion;

    parameters_block block;
};

struct parameters_block
{
    bool  occupied;
    ivec3 coords;
    ivec3 coords_texture;
    vec3  min_position;
    vec3  max_position;
}

struct parameters_ray 
{
    vec3  step_direction;
    float step_distance;
    float min_step_distance;
    float max_step_distance;
    int   max_steps_count;
    int   max_skips_count;

    vec3  start_position;
    vec3  end_position;
    float start_distance;   min_distance; 
    float end_distance;     max_distance; 
    float range_distance;   max_depth; path_depth; depth_range;  depth_distance;
    float rand_distance;

    bool  intersected;

    parameters_trace trace;
    parameters_stats stats;
};

struct parameters_stats
{
    float spanned_distance;
    float stepped_distance;  
    float skipped_distance;  
    int   steps_count;
    int   skips_count;
}

struct parameters_global
{
    vec3  camera_position;
    float min_start_distance; 
    float max_end_distance;
    float max_range_distance;
    float min_step_scaling;
    float max_step_scaling;
    vec3  min_position; 
    vec3  max_position;
} 

stepping = step_scaling
spacing = step_size

Inspired implementation: 
https://www.youtube.com/watch?v=rh7nWk1v4-8&ab_channel=TimurVizaev

Future Implementations
1. Direct Volume Rendering (DVR)
    Maximum Intensity Projection
2. Multi-Planar Reformation (MPR)
3. 4D Flow MRI Visualization
4. 3D/4D Volume Rendering
5. Doppler Flow Visualization
    Color Doppler mapping: Overlay color-coded blood flow (red/blue for flow direction) on 2D or 3D heart images to help visualize blood flow dynamics.
    Spectral Doppler rendering: Include velocity waveforms for precise flow measurements through valves.
6. Segmentation and Measurement Tools
    Heart structure segmentation: Allow the user to isolate and highlight specific heart regions (e.g., left ventricle, aorta).
    Measurement tools: Enable distance and area measurements (e.g., valve area, chamber volumes) directly on the heart model or slices.
7. Implement automatic heart structure segmentation



