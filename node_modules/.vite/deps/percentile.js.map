{
  "version": 3,
  "sources": ["../../percentile/lib/index.js"],
  "sourcesContent": ["/**\n @typedef {(Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array)} TypedArray\n */\n\n/**\n * Error message for a case when percentile is less than 0.\n *\n * @param {Number} p\n *\n * @return {String}\n */\nfunction lessThanZeroError(p) {\n  return 'Expect percentile to be >= 0 but given \"' + p + '\" and its type is \"' + (typeof p) + '\".';\n}\n\n/**\n * Error message for a case when percentile is greater than 100.\n *\n * @param {Number} p\n *\n * @return {String}\n */\nfunction greaterThanHundredError(p) {\n  return 'Expect percentile to be <= 100 but given \"' + p + '\" and its type is \"' + (typeof p) + '\".';\n}\n\n/**\n * Error message for a case when percentile is not a number (NaN).\n *\n * @param {Number} p\n *\n * @return {String}\n */\nfunction nanError(p) {\n  return 'Expect percentile to be a number but given \"' + p + '\" and its type is \"' + (typeof p) + '\".';\n}\n\n/**\n * Checks that a list of percentiles are all numbers and they lie in range 0..100.\n *\n * @param {Array<Number>} ps - percentiles to calculate\n *\n * @return {Array} List of errors\n */\nfunction validateInput(ps) {\n  return ps.reduce(function (errors, p) {\n    if (isNaN(Number(p))) {\n      errors.push(nanError(p));\n    } else if (p < 0) {\n      errors.push(lessThanZeroError(p));\n    } else if (p > 100) {\n      errors.push(greaterThanHundredError(p));\n    }\n    return errors;\n  }, []);\n}\n\n/**\n * Get percentile value from an array.\n *\n * @param {Number} p - percentile\n * @param {Array|TypedArray} list - list of values\n *\n * @return {*}\n */\nfunction getPsValue(p, list) {\n  if (p === 0) return list[0];\n  var kIndex = Math.ceil(list.length * (p / 100)) - 1;\n  return list[kIndex];\n}\n\n/**\n * Calculate percentile for given array of values.\n *\n * @template T\n * @param {Number|Array<Number>} pOrPs - percentile or a list of percentiles\n * @param {Array<T>|Array<Number>|TypedArray} list - array of values\n * @param {function(T): Number} [fn] - optional function to extract a value from an array item\n *\n * @return {Number|T|Array<Number>|Array<T>}\n */\nfunction percentile(pOrPs, list, fn) {\n  var ps = Array.isArray(pOrPs) ? pOrPs : [pOrPs];\n  var validationErrors = validateInput(ps);\n\n  if (validationErrors.length) {\n    throw new Error(validationErrors.join(' '));\n  }\n\n  list = list.slice().sort(function (a, b) {\n    if (fn) {\n      a = fn(a);\n      b = fn(b);\n    }\n\n    a = Number.isNaN(a) ? Number.NEGATIVE_INFINITY : a;\n    b = Number.isNaN(b) ? Number.NEGATIVE_INFINITY : b;\n\n    if (a > b) return 1;\n    if (a < b) return -1;\n\n    return 0;\n  });\n\n  if (ps.length === 1) {\n    return getPsValue(ps[0], list);\n  }\n\n  return ps.map(function (p) {\n    return getPsValue(p, list);\n  });\n}\n\nmodule.exports = percentile;\n"],
  "mappings": ";;;;;AAAA;AAAA;AAWA,aAAS,kBAAkB,GAAG;AAC5B,aAAO,6CAA6C,IAAI,wBAAyB,OAAO,IAAK;AAAA,IAC/F;AASA,aAAS,wBAAwB,GAAG;AAClC,aAAO,+CAA+C,IAAI,wBAAyB,OAAO,IAAK;AAAA,IACjG;AASA,aAAS,SAAS,GAAG;AACnB,aAAO,iDAAiD,IAAI,wBAAyB,OAAO,IAAK;AAAA,IACnG;AASA,aAAS,cAAc,IAAI;AACzB,aAAO,GAAG,OAAO,SAAU,QAAQ,GAAG;AACpC,YAAI,MAAM,OAAO,CAAC,CAAC,GAAG;AACpB,iBAAO,KAAK,SAAS,CAAC,CAAC;AAAA,QACzB,WAAW,IAAI,GAAG;AAChB,iBAAO,KAAK,kBAAkB,CAAC,CAAC;AAAA,QAClC,WAAW,IAAI,KAAK;AAClB,iBAAO,KAAK,wBAAwB,CAAC,CAAC;AAAA,QACxC;AACA,eAAO;AAAA,MACT,GAAG,CAAC,CAAC;AAAA,IACP;AAUA,aAAS,WAAW,GAAG,MAAM;AAC3B,UAAI,MAAM;AAAG,eAAO,KAAK,CAAC;AAC1B,UAAI,SAAS,KAAK,KAAK,KAAK,UAAU,IAAI,IAAI,IAAI;AAClD,aAAO,KAAK,MAAM;AAAA,IACpB;AAYA,aAAS,WAAW,OAAO,MAAM,IAAI;AACnC,UAAI,KAAK,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAC9C,UAAI,mBAAmB,cAAc,EAAE;AAEvC,UAAI,iBAAiB,QAAQ;AAC3B,cAAM,IAAI,MAAM,iBAAiB,KAAK,GAAG,CAAC;AAAA,MAC5C;AAEA,aAAO,KAAK,MAAM,EAAE,KAAK,SAAU,GAAG,GAAG;AACvC,YAAI,IAAI;AACN,cAAI,GAAG,CAAC;AACR,cAAI,GAAG,CAAC;AAAA,QACV;AAEA,YAAI,OAAO,MAAM,CAAC,IAAI,OAAO,oBAAoB;AACjD,YAAI,OAAO,MAAM,CAAC,IAAI,OAAO,oBAAoB;AAEjD,YAAI,IAAI;AAAG,iBAAO;AAClB,YAAI,IAAI;AAAG,iBAAO;AAElB,eAAO;AAAA,MACT,CAAC;AAED,UAAI,GAAG,WAAW,GAAG;AACnB,eAAO,WAAW,GAAG,CAAC,GAAG,IAAI;AAAA,MAC/B;AAEA,aAAO,GAAG,IAAI,SAAU,GAAG;AACzB,eAAO,WAAW,GAAG,IAAI;AAAA,MAC3B,CAAC;AAAA,IACH;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
